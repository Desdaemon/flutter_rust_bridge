// AUTO GENERATED FILE, DO NOT EDIT.
// Generated by `flutter_rust_bridge`.

// ignore_for_file: non_constant_identifier_names, unused_element, duplicate_ignore, directives_ordering, curly_braces_in_flow_control_structures, unnecessary_lambdas, slash_for_doc_comments, prefer_const_literals_to_create_immutables, implicit_dynamic_list_literal, duplicate_import, unused_import, camel_case_types

@JS()
library bridge_generated_web;

import 'package:js/js.dart';
import 'dart:convert';
import 'dart:typed_data';
import '../bridge_generated.dart';

@JS()
@anonymous
class wire_Point {
  external factory wire_Point({
    required double x,
    required double y,
  });
}

@JS()
@anonymous
class wire_Size {
  external factory wire_Size({
    required int width,
    required int height,
  });
}

@JS()
@anonymous
class wire_TreeNode {
  external factory wire_TreeNode({
    required String name,
    required List<wire_TreeNode> children,
  });
}

@JS(r"wasm_bindgen.wire_draw_mandelbrot")
external void wire_draw_mandelbrot(
    int port_, wire_Size image_size, wire_Point zoom_point, double scale, int num_threads);

@JS(r"wasm_bindgen.wire_passing_complex_structs")
external void wire_passing_complex_structs(int port_, wire_TreeNode root);

@JS(r"wasm_bindgen.wire_off_topic_memory_test_input_array")
external void wire_off_topic_memory_test_input_array(int port_, Uint8List input);

@JS(r"wasm_bindgen.wire_off_topic_memory_test_output_zero_copy_buffer")
external void wire_off_topic_memory_test_output_zero_copy_buffer(int port_, int len);

@JS(r"wasm_bindgen.wire_off_topic_memory_test_output_vec_u8")
external void wire_off_topic_memory_test_output_vec_u8(int port_, int len);

@JS(r"wasm_bindgen.wire_off_topic_memory_test_input_vec_of_object")
external void wire_off_topic_memory_test_input_vec_of_object(int port_, List<wire_Size> input);

@JS(r"wasm_bindgen.wire_off_topic_memory_test_output_vec_of_object")
external void wire_off_topic_memory_test_output_vec_of_object(int port_, int len);

@JS(r"wasm_bindgen.wire_off_topic_memory_test_input_complex_struct")
external void wire_off_topic_memory_test_input_complex_struct(int port_, wire_TreeNode input);

@JS(r"wasm_bindgen.wire_off_topic_memory_test_output_complex_struct")
external void wire_off_topic_memory_test_output_complex_struct(int port_, int len);

@JS(r"wasm_bindgen.wire_off_topic_deliberately_return_error")
external void wire_off_topic_deliberately_return_error(int port_);

@JS(r"wasm_bindgen.wire_off_topic_deliberately_panic")
external void wire_off_topic_deliberately_panic(int port_);

String _wire2api_String(dynamic /*String*/ raw) {
  return raw as String;
}

Point _wire2api_box_autoadd_point(dynamic /*wire_Point*/ raw) {
  return _wire2api_point(raw);
}

Size _wire2api_box_autoadd_size(dynamic /*wire_Size*/ raw) {
  return _wire2api_size(raw);
}

TreeNode _wire2api_box_autoadd_tree_node(dynamic /*wire_TreeNode*/ raw) {
  return _wire2api_tree_node(raw);
}

double _wire2api_f64(dynamic /*double*/ raw) {
  return raw as double;
}

int _wire2api_i32(dynamic /*int*/ raw) {
  return raw as int;
}

List<Size> _wire2api_list_size(dynamic /*List<wire_Size>*/ raw) {
  return (raw as List<dynamic>).map(_wire2api_size).toList();
}

List<TreeNode> _wire2api_list_tree_node(dynamic /*List<wire_TreeNode>*/ raw) {
  return (raw as List<dynamic>).map(_wire2api_tree_node).toList();
}

Point _wire2api_point(dynamic raw) {
  final arr = raw as List<dynamic>;
  if (arr.length != 2) throw Exception('unexpected arr length: expect 2 but see ${arr.length}');
  return Point(
    x: _wire2api_f64(arr[0]),
    y: _wire2api_f64(arr[1]),
  );
}

Size _wire2api_size(dynamic raw) {
  final arr = raw as List<dynamic>;
  if (arr.length != 2) throw Exception('unexpected arr length: expect 2 but see ${arr.length}');
  return Size(
    width: _wire2api_i32(arr[0]),
    height: _wire2api_i32(arr[1]),
  );
}

TreeNode _wire2api_tree_node(dynamic raw) {
  final arr = raw as List<dynamic>;
  if (arr.length != 2) throw Exception('unexpected arr length: expect 2 but see ${arr.length}');
  return TreeNode(
    name: _wire2api_String(arr[0]),
    children: _wire2api_list_tree_node(arr[1]),
  );
}

int _wire2api_u8(dynamic /*int*/ raw) {
  return raw as int;
}

Uint8List _wire2api_uint_8_list(dynamic raw) {
  return raw as Uint8List;
}

String _api2wire_String(String raw) {
  return raw;
}

wire_Point _api2wire_box_autoadd_point(Point raw) {
  return _api2wire_point(raw);
}

wire_Size _api2wire_box_autoadd_size(Size raw) {
  return _api2wire_size(raw);
}

wire_TreeNode _api2wire_box_autoadd_tree_node(TreeNode raw) {
  return _api2wire_tree_node(raw);
}

double _api2wire_f64(double raw) {
  return raw;
}

int _api2wire_i32(int raw) {
  return raw;
}

List<wire_Size> _api2wire_list_size(List<Size> raw) {
  return raw.map(_api2wire_size).toList();
}

List<wire_TreeNode> _api2wire_list_tree_node(List<TreeNode> raw) {
  return raw.map(_api2wire_tree_node).toList();
}

wire_Point _api2wire_point(Point raw) {
  return wire_Point(x: _api2wire_f64(raw.x), y: _api2wire_f64(raw.y));
}

wire_Size _api2wire_size(Size raw) {
  return wire_Size(width: _api2wire_i32(raw.width), height: _api2wire_i32(raw.height));
}

wire_TreeNode _api2wire_tree_node(TreeNode raw) {
  return wire_TreeNode(name: _api2wire_String(raw.name), children: _api2wire_list_tree_node(raw.children));
}

int _api2wire_u8(int raw) {
  return raw;
}

Uint8List _api2wire_uint_8_list(Uint8List raw) {
  return raw;
}
