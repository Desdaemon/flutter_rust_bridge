#![allow(non_camel_case_types, unused, clippy::redundant_closure, clippy::useless_conversion, non_snake_case)]
        // AUTO GENERATED FILE, DO NOT EDIT.
// Generated by `flutter_rust_bridge`.

        use crate::api::*;
        use flutter_rust_bridge::*;

        // Section: wire functions

        #[wasm_bindgen] pub fn wire_draw_mandelbrot(port_: i64,image_size: JsValue,zoom_point: JsValue,scale: f64,num_threads: i32)   { FLUTTER_RUST_BRIDGE_HANDLER.wrap(WrapInfo{ debug_name: "draw_mandelbrot", port: Some(port_), mode: FfiCallMode::Normal }, move || {
                let api_image_size = image_size.wire2api();let api_zoom_point = zoom_point.wire2api();let api_scale = scale.wire2api();let api_num_threads = num_threads.wire2api();
                    move |task_callback| draw_mandelbrot(api_image_size, api_zoom_point, api_scale, api_num_threads)
                    
            })
                 }

#[wasm_bindgen] pub fn wire_passing_complex_structs(port_: i64,root: JsValue)   { FLUTTER_RUST_BRIDGE_HANDLER.wrap(WrapInfo{ debug_name: "passing_complex_structs", port: Some(port_), mode: FfiCallMode::Normal }, move || {
                let api_root = root.wire2api();
                    move |task_callback| passing_complex_structs(api_root)
                    
            })
                 }

#[wasm_bindgen] pub fn wire_off_topic_memory_test_input_array(port_: i64,input: Box<[u8]>)   { FLUTTER_RUST_BRIDGE_HANDLER.wrap(WrapInfo{ debug_name: "off_topic_memory_test_input_array", port: Some(port_), mode: FfiCallMode::Normal }, move || {
                let api_input = input.wire2api();
                    move |task_callback| off_topic_memory_test_input_array(api_input)
                    
            })
                 }

#[wasm_bindgen] pub fn wire_off_topic_memory_test_output_zero_copy_buffer(port_: i64,len: i32)   { FLUTTER_RUST_BRIDGE_HANDLER.wrap(WrapInfo{ debug_name: "off_topic_memory_test_output_zero_copy_buffer", port: Some(port_), mode: FfiCallMode::Normal }, move || {
                let api_len = len.wire2api();
                    move |task_callback| off_topic_memory_test_output_zero_copy_buffer(api_len)
                    
            })
                 }

#[wasm_bindgen] pub fn wire_off_topic_memory_test_output_vec_u8(port_: i64,len: i32)   { FLUTTER_RUST_BRIDGE_HANDLER.wrap(WrapInfo{ debug_name: "off_topic_memory_test_output_vec_u8", port: Some(port_), mode: FfiCallMode::Normal }, move || {
                let api_len = len.wire2api();
                    move |task_callback| off_topic_memory_test_output_vec_u8(api_len)
                    
            })
                 }

#[wasm_bindgen] pub fn wire_off_topic_memory_test_input_vec_of_object(port_: i64,input: Box<[JsValue]>)   { FLUTTER_RUST_BRIDGE_HANDLER.wrap(WrapInfo{ debug_name: "off_topic_memory_test_input_vec_of_object", port: Some(port_), mode: FfiCallMode::Normal }, move || {
                let api_input = input.wire2api();
                    move |task_callback| off_topic_memory_test_input_vec_of_object(api_input)
                    
            })
                 }

#[wasm_bindgen] pub fn wire_off_topic_memory_test_output_vec_of_object(port_: i64,len: i32)   { FLUTTER_RUST_BRIDGE_HANDLER.wrap(WrapInfo{ debug_name: "off_topic_memory_test_output_vec_of_object", port: Some(port_), mode: FfiCallMode::Normal }, move || {
                let api_len = len.wire2api();
                    move |task_callback| off_topic_memory_test_output_vec_of_object(api_len)
                    
            })
                 }

#[wasm_bindgen] pub fn wire_off_topic_memory_test_input_complex_struct(port_: i64,input: JsValue)   { FLUTTER_RUST_BRIDGE_HANDLER.wrap(WrapInfo{ debug_name: "off_topic_memory_test_input_complex_struct", port: Some(port_), mode: FfiCallMode::Normal }, move || {
                let api_input = input.wire2api();
                    move |task_callback| off_topic_memory_test_input_complex_struct(api_input)
                    
            })
                 }

#[wasm_bindgen] pub fn wire_off_topic_memory_test_output_complex_struct(port_: i64,len: i32)   { FLUTTER_RUST_BRIDGE_HANDLER.wrap(WrapInfo{ debug_name: "off_topic_memory_test_output_complex_struct", port: Some(port_), mode: FfiCallMode::Normal }, move || {
                let api_len = len.wire2api();
                    move |task_callback| off_topic_memory_test_output_complex_struct(api_len)
                    
            })
                 }

#[wasm_bindgen] pub fn wire_off_topic_deliberately_return_error(port_: i64)   { FLUTTER_RUST_BRIDGE_HANDLER.wrap(WrapInfo{ debug_name: "off_topic_deliberately_return_error", port: Some(port_), mode: FfiCallMode::Normal }, move || {
                
                    move |task_callback| off_topic_deliberately_return_error()
                    
            })
                 }

#[wasm_bindgen] pub fn wire_off_topic_deliberately_panic(port_: i64)   { FLUTTER_RUST_BRIDGE_HANDLER.wrap(WrapInfo{ debug_name: "off_topic_deliberately_panic", port: Some(port_), mode: FfiCallMode::Normal }, move || {
                
                    move |task_callback| off_topic_deliberately_panic()
                    
            })
                 }

        // Section: wire structs

        















#[wasm_bindgen]
            extern "C" {
                pub type wire_Point;
                #[wasm_bindgen(method, getter)] pub fn x(this: &wire_Point) -> f64;
#[wasm_bindgen(method, getter)] pub fn y(this: &wire_Point) -> f64;
            }
            

#[wasm_bindgen]
            extern "C" {
                pub type wire_Size;
                #[wasm_bindgen(method, getter)] pub fn width(this: &wire_Size) -> i32;
#[wasm_bindgen(method, getter)] pub fn height(this: &wire_Size) -> i32;
            }
            

#[wasm_bindgen]
            extern "C" {
                pub type wire_TreeNode;
                #[wasm_bindgen(method, getter)] pub fn name(this: &wire_TreeNode) -> String;
#[wasm_bindgen(method, getter)] pub fn children(this: &wire_TreeNode) -> Box<[JsValue]>;
            }
            





        // Section: wire enums

        

        // Section: allocate functions

        

























        // Section: impl Wire2Api

        pub trait Wire2Api<T> {
            fn wire2api(self) -> T;
        }

        impl<T, S> Wire2Api<Option<T>> for *mut S
        where
            *mut S: Wire2Api<T>
        {
            #[inline]
            fn wire2api(self) -> Option<T> {
                if self.is_null() {
                    None
                } else {
                    Some(self.wire2api())
                }
            }
        }

        impl<T: Wire2Api<U>, U> Wire2Api<Option<U>> for Option<T> {
            #[inline]
            fn wire2api(self) -> Option<U> {
                self.map(Wire2Api::wire2api)
            }
        }

        impl Wire2Api<String> for String {
                fn wire2api(self) -> String {
                    self
                }
            }







impl Wire2Api<f64> for f64 {
                fn wire2api(self) -> f64 {
                    self
                }
            }

impl Wire2Api<i32> for i32 {
                fn wire2api(self) -> i32 {
                    self
                }
            }

impl Wire2Api<Vec<Size>> for Box<[JsValue]> {
                fn wire2api(self) -> Vec<Size> {
                    self.iter().map(Wire2Api::wire2api).collect()
                }
            }

impl Wire2Api<Vec<TreeNode>> for Box<[JsValue]> {
                fn wire2api(self) -> Vec<TreeNode> {
                    self.iter().map(Wire2Api::wire2api).collect()
                }
            }

impl Wire2Api<Point> for &JsValue {
                fn wire2api(self) -> Point {
                    let raw = self.unchecked_ref::<wire_Point>(); Point{x:  raw.x().wire2api(),y:  raw.y().wire2api()}
                }
            }

impl Wire2Api<Size> for &JsValue {
                fn wire2api(self) -> Size {
                    let raw = self.unchecked_ref::<wire_Size>(); Size{width:  raw.width().wire2api(),height:  raw.height().wire2api()}
                }
            }

impl Wire2Api<TreeNode> for &JsValue {
                fn wire2api(self) -> TreeNode {
                    let raw = self.unchecked_ref::<wire_TreeNode>(); TreeNode{name:  raw.name().wire2api(),children:  raw.children().wire2api()}
                }
            }

impl Wire2Api<u8> for u8 {
                fn wire2api(self) -> u8 {
                    self
                }
            }

impl Wire2Api<Vec<u8>> for Box<[u8]> {
                fn wire2api(self) -> Vec<u8> {
                    self.to_vec()
                }
            }

        // Section: impl NewWithNullPtr

        pub trait NewWithNullPtr {
            fn new_with_null_ptr() -> Self;
        }

        impl<T> NewWithNullPtr for *mut T {
            fn new_with_null_ptr() -> Self {
                std::ptr::null_mut()
            }
        }

        

























        // Section: impl IntoDart
        









impl support::IntoDart for Size {
                fn into_dart(self) -> support::DartCObject {
                    vec![
                        self.width.into_dart(),
self.height.into_dart()
                    ].into_dart()
                }
            }
            impl support::IntoDartExceptPrimitive for Size {}
            

impl support::IntoDart for TreeNode {
                fn into_dart(self) -> support::DartCObject {
                    vec![
                        self.name.into_dart(),
self.children.into_dart()
                    ].into_dart()
                }
            }
            impl support::IntoDartExceptPrimitive for TreeNode {}
            





        // Section: executor
        support::lazy_static! {
                pub static ref FLUTTER_RUST_BRIDGE_HANDLER: support::DefaultHandler = Default::default();
            }
            

        // Section: sync execution mode utility
        
                #[no_mangle]
                pub extern "C" fn free_WireSyncReturnStruct(val: support::WireSyncReturnStruct)  {
                    unsafe { let _ = support::vec_from_leak_ptr(val.ptr, val.len); }
                }
            

        