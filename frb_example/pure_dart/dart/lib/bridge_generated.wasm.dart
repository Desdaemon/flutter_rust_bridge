@JS()
library bridge_generated_wasm;

import 'package:js/js.dart';
import 'dart:convert';
import 'dart:typed_data';
import 'package:flutter_rust_bridge/flutter_rust_bridge.dart';
// AUTO GENERATED FILE, DO NOT EDIT.
// Generated by `flutter_rust_bridge`.

// ignore_for_file: non_constant_identifier_names, unused_element, duplicate_ignore, directives_ordering, curly_braces_in_flow_control_structures, unnecessary_lambdas, slash_for_doc_comments, prefer_const_literals_to_create_immutables, implicit_dynamic_list_literal, duplicate_import, unused_import, prefer_single_quotes

import "bridge_generated.d.dart";

class FlutterRustBridgeExampleImpl implements FlutterRustBridgeExample {
  const FlutterRustBridgeExampleImpl();

  Future<int> simpleAdder({required int a, required int b, dynamic hint}) => executeNormal(FlutterRustBridgeTask(
        callFfi: (port_) => inner.wire_simple_adder(port_, _api2wire_i32(a), _api2wire_i32(b)),
        parseSuccessData: _wire2api_i32,
        constMeta: const FlutterRustBridgeTaskConstMeta(
          debugName: "simple_adder",
          argNames: ["a", "b"],
        ),
        argValues: [a, b],
        hint: hint,
      ));

  Future<int> primitiveTypes(
          {required int myI32, required int myI64, required double myF64, required bool myBool, dynamic hint}) =>
      executeNormal(FlutterRustBridgeTask(
        callFfi: (port_) =>
            inner.wire_primitive_types(port_, _api2wire_i32(myI32), _api2wire_i64(myI64), _api2wire_f64(myF64), myBool),
        parseSuccessData: _wire2api_i32,
        constMeta: const FlutterRustBridgeTaskConstMeta(
          debugName: "primitive_types",
          argNames: ["myI32", "myI64", "myF64", "myBool"],
        ),
        argValues: [myI32, myI64, myF64, myBool],
        hint: hint,
      ));

  Future<int> primitiveU32({required int myU32, dynamic hint}) => executeNormal(FlutterRustBridgeTask(
        callFfi: (port_) => inner.wire_primitive_u32(port_, _api2wire_u32(myU32)),
        parseSuccessData: _wire2api_u32,
        constMeta: const FlutterRustBridgeTaskConstMeta(
          debugName: "primitive_u32",
          argNames: ["myU32"],
        ),
        argValues: [myU32],
        hint: hint,
      ));

  Future<String> handleString({required String s, dynamic hint}) => executeNormal(FlutterRustBridgeTask(
        callFfi: (port_) => inner.wire_handle_string(port_, _api2wire_String(s)),
        parseSuccessData: _wire2api_String,
        constMeta: const FlutterRustBridgeTaskConstMeta(
          debugName: "handle_string",
          argNames: ["s"],
        ),
        argValues: [s],
        hint: hint,
      ));

  Future<void> handleReturnUnit({dynamic hint}) => executeNormal(FlutterRustBridgeTask(
        callFfi: (port_) => inner.wire_handle_return_unit(port_),
        parseSuccessData: _wire2api_unit,
        constMeta: const FlutterRustBridgeTaskConstMeta(
          debugName: "handle_return_unit",
          argNames: [],
        ),
        argValues: [],
        hint: hint,
      ));

  Future<Uint8List> handleVecU8({required Uint8List v, dynamic hint}) => executeNormal(FlutterRustBridgeTask(
        callFfi: (port_) => inner.wire_handle_vec_u8(port_, _api2wire_uint_8_list(v)),
        parseSuccessData: _wire2api_uint_8_list,
        constMeta: const FlutterRustBridgeTaskConstMeta(
          debugName: "handle_vec_u8",
          argNames: ["v"],
        ),
        argValues: [v],
        hint: hint,
      ));

  Future<VecOfPrimitivePack> handleVecOfPrimitive({required int n, dynamic hint}) =>
      executeNormal(FlutterRustBridgeTask(
        callFfi: (port_) => inner.wire_handle_vec_of_primitive(port_, _api2wire_i32(n)),
        parseSuccessData: _wire2api_vec_of_primitive_pack,
        constMeta: const FlutterRustBridgeTaskConstMeta(
          debugName: "handle_vec_of_primitive",
          argNames: ["n"],
        ),
        argValues: [n],
        hint: hint,
      ));

  Future<ZeroCopyVecOfPrimitivePack> handleZeroCopyVecOfPrimitive({required int n, dynamic hint}) =>
      executeNormal(FlutterRustBridgeTask(
        callFfi: (port_) => inner.wire_handle_zero_copy_vec_of_primitive(port_, _api2wire_i32(n)),
        parseSuccessData: _wire2api_zero_copy_vec_of_primitive_pack,
        constMeta: const FlutterRustBridgeTaskConstMeta(
          debugName: "handle_zero_copy_vec_of_primitive",
          argNames: ["n"],
        ),
        argValues: [n],
        hint: hint,
      ));

  Future<MySize> handleStruct({required MySize arg, required MySize boxed, dynamic hint}) =>
      executeNormal(FlutterRustBridgeTask(
        callFfi: (port_) =>
            inner.wire_handle_struct(port_, _api2wire_box_autoadd_my_size(arg), _api2wire_box_my_size(boxed)),
        parseSuccessData: _wire2api_my_size,
        constMeta: const FlutterRustBridgeTaskConstMeta(
          debugName: "handle_struct",
          argNames: ["arg", "boxed"],
        ),
        argValues: [arg, boxed],
        hint: hint,
      ));

  Future<NewTypeInt> handleNewtype({required NewTypeInt arg, dynamic hint}) => executeNormal(FlutterRustBridgeTask(
        callFfi: (port_) => inner.wire_handle_newtype(port_, _api2wire_box_autoadd_new_type_int(arg)),
        parseSuccessData: _wire2api_new_type_int,
        constMeta: const FlutterRustBridgeTaskConstMeta(
          debugName: "handle_newtype",
          argNames: ["arg"],
        ),
        argValues: [arg],
        hint: hint,
      ));

  Future<List<MySize>> handleListOfStruct({required List<MySize> l, dynamic hint}) =>
      executeNormal(FlutterRustBridgeTask(
        callFfi: (port_) => inner.wire_handle_list_of_struct(port_, _api2wire_list_my_size(l)),
        parseSuccessData: _wire2api_list_my_size,
        constMeta: const FlutterRustBridgeTaskConstMeta(
          debugName: "handle_list_of_struct",
          argNames: ["l"],
        ),
        argValues: [l],
        hint: hint,
      ));

  Future<List<String>> handleStringList({required List<String> names, dynamic hint}) =>
      executeNormal(FlutterRustBridgeTask(
        callFfi: (port_) => inner.wire_handle_string_list(port_, _api2wire_StringList(names)),
        parseSuccessData: _wire2api_StringList,
        constMeta: const FlutterRustBridgeTaskConstMeta(
          debugName: "handle_string_list",
          argNames: ["names"],
        ),
        argValues: [names],
        hint: hint,
      ));

  Future<MyTreeNode> handleComplexStruct({required MyTreeNode s, dynamic hint}) => executeNormal(FlutterRustBridgeTask(
        callFfi: (port_) => inner.wire_handle_complex_struct(port_, _api2wire_box_autoadd_my_tree_node(s)),
        parseSuccessData: _wire2api_my_tree_node,
        constMeta: const FlutterRustBridgeTaskConstMeta(
          debugName: "handle_complex_struct",
          argNames: ["s"],
        ),
        argValues: [s],
        hint: hint,
      ));

  Uint8List handleSyncReturn({required String mode, dynamic hint}) => executeSync(FlutterRustBridgeSyncTask(
        callFfi: () => inner.wire_handle_sync_return(_api2wire_String(mode)),
        constMeta: const FlutterRustBridgeTaskConstMeta(
          debugName: "handle_sync_return",
          argNames: ["mode"],
        ),
        argValues: [mode],
        hint: hint,
      ));

  Stream<String> handleStream({required String arg, dynamic hint}) => executeStream(FlutterRustBridgeTask(
        callFfi: (port_) => inner.wire_handle_stream(port_, _api2wire_String(arg)),
        parseSuccessData: _wire2api_String,
        constMeta: const FlutterRustBridgeTaskConstMeta(
          debugName: "handle_stream",
          argNames: ["arg"],
        ),
        argValues: [arg],
        hint: hint,
      ));

  Future<int> returnErr({dynamic hint}) => executeNormal(FlutterRustBridgeTask(
        callFfi: (port_) => inner.wire_return_err(port_),
        parseSuccessData: _wire2api_i32,
        constMeta: const FlutterRustBridgeTaskConstMeta(
          debugName: "return_err",
          argNames: [],
        ),
        argValues: [],
        hint: hint,
      ));

  Future<int> returnPanic({dynamic hint}) => executeNormal(FlutterRustBridgeTask(
        callFfi: (port_) => inner.wire_return_panic(port_),
        parseSuccessData: _wire2api_i32,
        constMeta: const FlutterRustBridgeTaskConstMeta(
          debugName: "return_panic",
          argNames: [],
        ),
        argValues: [],
        hint: hint,
      ));

  Future<double?> handleOptionalReturn({required double left, required double right, dynamic hint}) =>
      executeNormal(FlutterRustBridgeTask(
        callFfi: (port_) => inner.wire_handle_optional_return(port_, _api2wire_f64(left), _api2wire_f64(right)),
        parseSuccessData: _wire2api_opt_box_autoadd_f64,
        constMeta: const FlutterRustBridgeTaskConstMeta(
          debugName: "handle_optional_return",
          argNames: ["left", "right"],
        ),
        argValues: [left, right],
        hint: hint,
      ));

  Future<Element?> handleOptionalStruct({String? document, dynamic hint}) => executeNormal(FlutterRustBridgeTask(
        callFfi: (port_) => inner.wire_handle_optional_struct(port_, _api2wire_opt_String(document)),
        parseSuccessData: _wire2api_opt_box_autoadd_element,
        constMeta: const FlutterRustBridgeTaskConstMeta(
          debugName: "handle_optional_struct",
          argNames: ["document"],
        ),
        argValues: [document],
        hint: hint,
      ));

  Future<ExoticOptionals?> handleOptionalIncrement({ExoticOptionals? opt, dynamic hint}) =>
      executeNormal(FlutterRustBridgeTask(
        callFfi: (port_) =>
            inner.wire_handle_optional_increment(port_, _api2wire_opt_box_autoadd_exotic_optionals(opt)),
        parseSuccessData: _wire2api_opt_box_autoadd_exotic_optionals,
        constMeta: const FlutterRustBridgeTaskConstMeta(
          debugName: "handle_optional_increment",
          argNames: ["opt"],
        ),
        argValues: [opt],
        hint: hint,
      ));

  Future<double> handleIncrementBoxedOptional({double? opt, dynamic hint}) => executeNormal(FlutterRustBridgeTask(
        callFfi: (port_) => inner.wire_handle_increment_boxed_optional(port_, _api2wire_opt_box_f64(opt)),
        parseSuccessData: _wire2api_f64,
        constMeta: const FlutterRustBridgeTaskConstMeta(
          debugName: "handle_increment_boxed_optional",
          argNames: ["opt"],
        ),
        argValues: [opt],
        hint: hint,
      ));

  Future<String> handleOptionBoxArguments(
          {int? i8Box,
          int? u8Box,
          int? i32Box,
          int? i64Box,
          double? f64Box,
          bool? boolbox,
          ExoticOptionals? structbox,
          dynamic hint}) =>
      executeNormal(FlutterRustBridgeTask(
        callFfi: (port_) => inner.wire_handle_option_box_arguments(
            port_,
            _api2wire_opt_box_i8(i8Box),
            _api2wire_opt_box_u8(u8Box),
            _api2wire_opt_box_i32(i32Box),
            _api2wire_opt_box_i64(i64Box),
            _api2wire_opt_box_f64(f64Box),
            _api2wire_opt_box_bool(boolbox),
            _api2wire_opt_box_exotic_optionals(structbox)),
        parseSuccessData: _wire2api_String,
        constMeta: const FlutterRustBridgeTaskConstMeta(
          debugName: "handle_option_box_arguments",
          argNames: ["i8Box", "u8Box", "i32Box", "i64Box", "f64Box", "boolbox", "structbox"],
        ),
        argValues: [i8Box, u8Box, i32Box, i64Box, f64Box, boolbox, structbox],
        hint: hint,
      ));

  Future<Weekdays?> handleReturnEnum({required String input, dynamic hint}) => executeNormal(FlutterRustBridgeTask(
        callFfi: (port_) => inner.wire_handle_return_enum(port_, _api2wire_String(input)),
        parseSuccessData: _wire2api_opt_weekdays,
        constMeta: const FlutterRustBridgeTaskConstMeta(
          debugName: "handle_return_enum",
          argNames: ["input"],
        ),
        argValues: [input],
        hint: hint,
      ));

  Future<Weekdays> handleEnumParameter({required Weekdays weekday, dynamic hint}) =>
      executeNormal(FlutterRustBridgeTask(
        callFfi: (port_) => inner.wire_handle_enum_parameter(port_, _api2wire_weekdays(weekday)),
        parseSuccessData: _wire2api_weekdays,
        constMeta: const FlutterRustBridgeTaskConstMeta(
          debugName: "handle_enum_parameter",
          argNames: ["weekday"],
        ),
        argValues: [weekday],
        hint: hint,
      ));

  Future<Uint64List> handleU64Vec({Uint64List? vec, dynamic hint}) => executeNormal(FlutterRustBridgeTask(
        callFfi: (port_) => inner.wire_handle_u64_vec(port_, _api2wire_opt_uint_64_list(vec)),
        parseSuccessData: _wire2api_uint_64_list,
        constMeta: const FlutterRustBridgeTaskConstMeta(
          debugName: "handle_u64_vec",
          argNames: ["vec"],
        ),
        argValues: [vec],
        hint: hint,
      ));

  Future<void> handleCustomizedStruct({required Customized val, dynamic hint}) => executeNormal(FlutterRustBridgeTask(
        callFfi: (port_) => inner.wire_handle_customized_struct(port_, _api2wire_box_autoadd_customized(val)),
        parseSuccessData: _wire2api_unit,
        constMeta: const FlutterRustBridgeTaskConstMeta(
          debugName: "handle_customized_struct",
          argNames: ["val"],
        ),
        argValues: [val],
        hint: hint,
      ));

  Future<KitchenSink> handleEnumStruct({required KitchenSink val, dynamic hint}) => executeNormal(FlutterRustBridgeTask(
        callFfi: (port_) => inner.wire_handle_enum_struct(port_, _api2wire_box_autoadd_kitchen_sink(val)),
        parseSuccessData: _wire2api_kitchen_sink,
        constMeta: const FlutterRustBridgeTaskConstMeta(
          debugName: "handle_enum_struct",
          argNames: ["val"],
        ),
        argValues: [val],
        hint: hint,
      ));

  Future<bool> useImportedStruct({required MyStruct myStruct, dynamic hint}) => executeNormal(FlutterRustBridgeTask(
        callFfi: (port_) => inner.wire_use_imported_struct(port_, _api2wire_box_autoadd_my_struct(myStruct)),
        parseSuccessData: _wire2api_bool,
        constMeta: const FlutterRustBridgeTaskConstMeta(
          debugName: "use_imported_struct",
          argNames: ["myStruct"],
        ),
        argValues: [myStruct],
        hint: hint,
      ));

  Future<bool> useImportedEnum({required MyEnum myEnum, dynamic hint}) => executeNormal(FlutterRustBridgeTask(
        callFfi: (port_) => inner.wire_use_imported_enum(port_, _api2wire_my_enum(myEnum)),
        parseSuccessData: _wire2api_bool,
        constMeta: const FlutterRustBridgeTaskConstMeta(
          debugName: "use_imported_enum",
          argNames: ["myEnum"],
        ),
        argValues: [myEnum],
        hint: hint,
      ));

  Future<ApplicationSettings> getAppSettings({dynamic hint}) => executeNormal(FlutterRustBridgeTask(
        callFfi: (port_) => inner.wire_get_app_settings(port_),
        parseSuccessData: _wire2api_application_settings,
        constMeta: const FlutterRustBridgeTaskConstMeta(
          debugName: "get_app_settings",
          argNames: [],
        ),
        argValues: [],
        hint: hint,
      ));

  Future<bool> isAppEmbedded({required ApplicationSettings appSettings, dynamic hint}) =>
      executeNormal(FlutterRustBridgeTask(
        callFfi: (port_) => inner.wire_is_app_embedded(port_, _api2wire_box_autoadd_application_settings(appSettings)),
        parseSuccessData: _wire2api_bool,
        constMeta: const FlutterRustBridgeTaskConstMeta(
          debugName: "is_app_embedded",
          argNames: ["appSettings"],
        ),
        argValues: [appSettings],
        hint: hint,
      ));

  Future<ApplicationMessage> getMessage({dynamic hint}) => executeNormal(FlutterRustBridgeTask(
        callFfi: (port_) => inner.wire_get_message(port_),
        parseSuccessData: _wire2api_application_message,
        constMeta: const FlutterRustBridgeTaskConstMeta(
          debugName: "get_message",
          argNames: [],
        ),
        argValues: [],
        hint: hint,
      ));
}

// Section: function imports
@JS(r"wasm_bindgen.wire_simple_adder")
external void _wire_simple_adder(int port_, int a, int b);

@JS(r"wasm_bindgen.wire_primitive_types")
external void _wire_primitive_types(int port_, int my_i32, BigInt my_i64, double my_f64, bool my_bool);

@JS(r"wasm_bindgen.wire_primitive_u32")
external void _wire_primitive_u32(int port_, int my_u32);

@JS(r"wasm_bindgen.wire_handle_string")
external void _wire_handle_string(int port_, String s);

@JS(r"wasm_bindgen.wire_handle_return_unit")
external void _wire_handle_return_unit(int port_);

@JS(r"wasm_bindgen.wire_handle_vec_u8")
external void _wire_handle_vec_u8(int port_, Uint8List v);

@JS(r"wasm_bindgen.wire_handle_vec_of_primitive")
external void _wire_handle_vec_of_primitive(int port_, int n);

@JS(r"wasm_bindgen.wire_handle_zero_copy_vec_of_primitive")
external void _wire_handle_zero_copy_vec_of_primitive(int port_, int n);

@JS(r"wasm_bindgen.wire_handle_struct")
external void _wire_handle_struct(int port_, wire_MySize arg, wire_MySize boxed);

@JS(r"wasm_bindgen.wire_handle_newtype")
external void _wire_handle_newtype(int port_, wire_NewTypeInt arg);

@JS(r"wasm_bindgen.wire_handle_list_of_struct")
external void _wire_handle_list_of_struct(int port_, List<wire_MySize> l);

@JS(r"wasm_bindgen.wire_handle_string_list")
external void _wire_handle_string_list(int port_, List<String> names);

@JS(r"wasm_bindgen.wire_handle_complex_struct")
external void _wire_handle_complex_struct(int port_, wire_MyTreeNode s);

@JS(r"wasm_bindgen.wire_handle_sync_return")
external void _wire_handle_sync_return(String mode);

@JS(r"wasm_bindgen.wire_handle_stream")
external void _wire_handle_stream(int port_, String arg);

@JS(r"wasm_bindgen.wire_return_err")
external void _wire_return_err(int port_);

@JS(r"wasm_bindgen.wire_return_panic")
external void _wire_return_panic(int port_);

@JS(r"wasm_bindgen.wire_handle_optional_return")
external void _wire_handle_optional_return(int port_, double left, double right);

@JS(r"wasm_bindgen.wire_handle_optional_struct")
external void _wire_handle_optional_struct(int port_, String? document);

@JS(r"wasm_bindgen.wire_handle_optional_increment")
external void _wire_handle_optional_increment(int port_, wire_ExoticOptionals? opt);

@JS(r"wasm_bindgen.wire_handle_increment_boxed_optional")
external void _wire_handle_increment_boxed_optional(int port_, double? opt);

@JS(r"wasm_bindgen.wire_handle_option_box_arguments")
external void _wire_handle_option_box_arguments(int port_, int? i8box, int? u8box, int? i32box, BigInt? i64box,
    double? f64box, bool? boolbox, wire_ExoticOptionals? structbox);

@JS(r"wasm_bindgen.wire_handle_return_enum")
external void _wire_handle_return_enum(int port_, String input);

@JS(r"wasm_bindgen.wire_handle_enum_parameter")
external void _wire_handle_enum_parameter(int port_, int weekday);

@JS(r"wasm_bindgen.wire_handle_u64_vec")
external void _wire_handle_u64_vec(int port_, List<BigInt>? vec);

@JS(r"wasm_bindgen.wire_handle_customized_struct")
external void _wire_handle_customized_struct(int port_, wire_Customized val);

@JS(r"wasm_bindgen.wire_handle_enum_struct")
external void _wire_handle_enum_struct(int port_, wire_KitchenSink val);

@JS(r"wasm_bindgen.wire_use_imported_struct")
external void _wire_use_imported_struct(int port_, wire_MyStruct my_struct);

@JS(r"wasm_bindgen.wire_use_imported_enum")
external void _wire_use_imported_enum(int port_, int my_enum);

@JS(r"wasm_bindgen.wire_get_app_settings")
external void _wire_get_app_settings(int port_);

@JS(r"wasm_bindgen.wire_is_app_embedded")
external void _wire_is_app_embedded(int port_, wire_ApplicationSettings app_settings);

@JS(r"wasm_bindgen.wire_get_message")
external void _wire_get_message(int port_);

// Section: api2wire

wire_ApplicationEnv _api2wire_box_application_env(ApplicationEnv raw) {
  throw UnimplementedError();
}

wire_Attribute _api2wire_box_autoadd_attribute(Attribute raw) {
  throw UnimplementedError();
}

bool _api2wire_box_autoadd_bool(bool raw) {
  throw UnimplementedError();
}

wire_Element _api2wire_box_autoadd_element(Element raw) {
  throw UnimplementedError();
}

wire_ExoticOptionals _api2wire_box_autoadd_exotic_optionals(ExoticOptionals raw) {
  throw UnimplementedError();
}

double _api2wire_box_autoadd_f64(double raw) {
  throw UnimplementedError();
}

int _api2wire_box_autoadd_i32(int raw) {
  throw UnimplementedError();
}

BigInt _api2wire_box_autoadd_i64(int raw) {
  throw UnimplementedError();
}

wire_NewTypeInt _api2wire_box_autoadd_new_type_int(NewTypeInt raw) {
  throw UnimplementedError();
}

wire_KitchenSink _api2wire_box_kitchen_sink(KitchenSink raw) {
  throw UnimplementedError();
}

String? _api2wire_opt_String(String? raw) {
  return raw == null ? null : _api2wire_String(raw);
}

List<String>? _api2wire_opt_StringList(List<String>? raw) {
  return raw == null ? null : _api2wire_StringList(raw);
}

Uint8List? _api2wire_opt_ZeroCopyBuffer_Uint8List(Uint8List? raw) {
  return raw == null ? null : _api2wire_ZeroCopyBuffer_Uint8List(raw);
}

wire_Attribute? _api2wire_opt_box_autoadd_attribute(Attribute? raw) {
  return raw == null ? null : _api2wire_box_autoadd_attribute(raw);
}

bool? _api2wire_opt_box_autoadd_bool(bool? raw) {
  return raw == null ? null : _api2wire_box_autoadd_bool(raw);
}

wire_Element? _api2wire_opt_box_autoadd_element(Element? raw) {
  return raw == null ? null : _api2wire_box_autoadd_element(raw);
}

wire_ExoticOptionals? _api2wire_opt_box_autoadd_exotic_optionals(ExoticOptionals? raw) {
  return raw == null ? null : _api2wire_box_autoadd_exotic_optionals(raw);
}

double? _api2wire_opt_box_autoadd_f64(double? raw) {
  return raw == null ? null : _api2wire_box_autoadd_f64(raw);
}

int? _api2wire_opt_box_autoadd_i32(int? raw) {
  return raw == null ? null : _api2wire_box_autoadd_i32(raw);
}

BigInt? _api2wire_opt_box_autoadd_i64(int? raw) {
  return raw == null ? null : _api2wire_box_autoadd_i64(raw);
}

wire_NewTypeInt? _api2wire_opt_box_autoadd_new_type_int(NewTypeInt? raw) {
  return raw == null ? null : _api2wire_box_autoadd_new_type_int(raw);
}

Float32List? _api2wire_opt_float_32_list(Float32List? raw) {
  return raw == null ? null : _api2wire_float_32_list(raw);
}

Float64List? _api2wire_opt_float_64_list(Float64List? raw) {
  return raw == null ? null : _api2wire_float_64_list(raw);
}

Int32List? _api2wire_opt_int_32_list(Int32List? raw) {
  return raw == null ? null : _api2wire_int_32_list(raw);
}

List<BigInt>? _api2wire_opt_int_64_list(Int64List? raw) {
  return raw == null ? null : _api2wire_int_64_list(raw);
}

Int8List? _api2wire_opt_int_8_list(Int8List? raw) {
  return raw == null ? null : _api2wire_int_8_list(raw);
}

List<wire_Attribute>? _api2wire_opt_list_attribute(List<Attribute>? raw) {
  return raw == null ? null : _api2wire_list_attribute(raw);
}

List<wire_Element>? _api2wire_opt_list_element(List<Element>? raw) {
  return raw == null ? null : _api2wire_list_element(raw);
}

List<wire_Attribute?>? _api2wire_opt_list_opt_box_autoadd_attribute(List<Attribute?>? raw) {
  return raw == null ? null : _api2wire_list_opt_box_autoadd_attribute(raw);
}

Uint8List? _api2wire_opt_uint_8_list(Uint8List? raw) {
  return raw == null ? null : _api2wire_uint_8_list(raw);
}

int? _api2wire_opt_weekdays(Weekdays? raw) {
  return raw == null ? null : _api2wire_weekdays(raw);
}

// Section: wire2api
String _wire2api_String(dynamic raw) {
  throw UnimplementedError();
}

List<String> _wire2api_StringList(dynamic raw) {
  throw UnimplementedError();
}

Uint8List _wire2api_ZeroCopyBuffer_Uint8List(dynamic raw) {
  throw UnimplementedError();
}

ApplicationEnv _wire2api_application_env(dynamic raw) {
  throw UnimplementedError();
}

ApplicationEnvVar _wire2api_application_env_var(dynamic raw) {
  throw UnimplementedError();
}

ApplicationMode _wire2api_application_mode(dynamic raw) {
  throw UnimplementedError();
}

ApplicationSettings _wire2api_application_settings(dynamic raw) {
  throw UnimplementedError();
}

Attribute _wire2api_attribute(dynamic raw) {
  throw UnimplementedError();
}

bool _wire2api_bool(dynamic raw) {
  throw UnimplementedError();
}

ApplicationEnv _wire2api_box_application_env(dynamic raw) {
  throw UnimplementedError();
}

ApplicationSettings _wire2api_box_autoadd_application_settings(dynamic raw) {
  throw UnimplementedError();
}

Attribute _wire2api_box_autoadd_attribute(dynamic raw) {
  throw UnimplementedError();
}

bool _wire2api_box_autoadd_bool(dynamic raw) {
  throw UnimplementedError();
}

Customized _wire2api_box_autoadd_customized(dynamic raw) {
  throw UnimplementedError();
}

ExoticOptionals _wire2api_box_autoadd_exotic_optionals(dynamic raw) {
  throw UnimplementedError();
}

double _wire2api_box_autoadd_f64(dynamic raw) {
  throw UnimplementedError();
}

int _wire2api_box_autoadd_i32(dynamic raw) {
  throw UnimplementedError();
}

int _wire2api_box_autoadd_i64(dynamic raw) {
  throw UnimplementedError();
}

KitchenSink _wire2api_box_autoadd_kitchen_sink(dynamic raw) {
  throw UnimplementedError();
}

MySize _wire2api_box_autoadd_my_size(dynamic raw) {
  throw UnimplementedError();
}

MyStruct _wire2api_box_autoadd_my_struct(dynamic raw) {
  throw UnimplementedError();
}

MyTreeNode _wire2api_box_autoadd_my_tree_node(dynamic raw) {
  throw UnimplementedError();
}

NewTypeInt _wire2api_box_autoadd_new_type_int(dynamic raw) {
  throw UnimplementedError();
}

bool _wire2api_box_bool(dynamic raw) {
  throw UnimplementedError();
}

ExoticOptionals _wire2api_box_exotic_optionals(dynamic raw) {
  throw UnimplementedError();
}

double _wire2api_box_f64(dynamic raw) {
  throw UnimplementedError();
}

int _wire2api_box_i32(dynamic raw) {
  throw UnimplementedError();
}

int _wire2api_box_i64(dynamic raw) {
  throw UnimplementedError();
}

int _wire2api_box_i8(dynamic raw) {
  throw UnimplementedError();
}

KitchenSink _wire2api_box_kitchen_sink(dynamic raw) {
  throw UnimplementedError();
}

MySize _wire2api_box_my_size(dynamic raw) {
  throw UnimplementedError();
}

int _wire2api_box_u8(dynamic raw) {
  throw UnimplementedError();
}

Customized _wire2api_customized(dynamic raw) {
  throw UnimplementedError();
}

ExoticOptionals _wire2api_exotic_optionals(dynamic raw) {
  throw UnimplementedError();
}

double _wire2api_f32(dynamic raw) {
  throw UnimplementedError();
}

double _wire2api_f64(dynamic raw) {
  throw UnimplementedError();
}

Float32List _wire2api_float_32_list(dynamic raw) {
  throw UnimplementedError();
}

Float64List _wire2api_float_64_list(dynamic raw) {
  throw UnimplementedError();
}

int _wire2api_i32(dynamic raw) {
  throw UnimplementedError();
}

int _wire2api_i64(dynamic raw) {
  throw UnimplementedError();
}

int _wire2api_i8(dynamic raw) {
  throw UnimplementedError();
}

Int32List _wire2api_int_32_list(dynamic raw) {
  throw UnimplementedError();
}

Int64List _wire2api_int_64_list(dynamic raw) {
  throw UnimplementedError();
}

Int8List _wire2api_int_8_list(dynamic raw) {
  throw UnimplementedError();
}

KitchenSink _wire2api_kitchen_sink(dynamic raw) {
  throw UnimplementedError();
}

List<ApplicationEnvVar> _wire2api_list_application_env_var(dynamic raw) {
  throw UnimplementedError();
}

List<Attribute> _wire2api_list_attribute(dynamic raw) {
  throw UnimplementedError();
}

List<MySize> _wire2api_list_my_size(dynamic raw) {
  throw UnimplementedError();
}

List<MyTreeNode> _wire2api_list_my_tree_node(dynamic raw) {
  throw UnimplementedError();
}

List<Attribute?> _wire2api_list_opt_box_autoadd_attribute(dynamic raw) {
  throw UnimplementedError();
}

MyEnum _wire2api_my_enum(dynamic raw) {
  throw UnimplementedError();
}

MySize _wire2api_my_size(dynamic raw) {
  throw UnimplementedError();
}

MyStruct _wire2api_my_struct(dynamic raw) {
  throw UnimplementedError();
}

MyTreeNode _wire2api_my_tree_node(dynamic raw) {
  throw UnimplementedError();
}

NewTypeInt _wire2api_new_type_int(dynamic raw) {
  throw UnimplementedError();
}

String? _wire2api_opt_String(dynamic raw) {
  throw UnimplementedError();
}

List<String>? _wire2api_opt_StringList(dynamic raw) {
  throw UnimplementedError();
}

Uint8List? _wire2api_opt_ZeroCopyBuffer_Uint8List(dynamic raw) {
  throw UnimplementedError();
}

Attribute? _wire2api_opt_box_autoadd_attribute(dynamic raw) {
  throw UnimplementedError();
}

bool? _wire2api_opt_box_autoadd_bool(dynamic raw) {
  throw UnimplementedError();
}

ExoticOptionals? _wire2api_opt_box_autoadd_exotic_optionals(dynamic raw) {
  throw UnimplementedError();
}

double? _wire2api_opt_box_autoadd_f64(dynamic raw) {
  throw UnimplementedError();
}

int? _wire2api_opt_box_autoadd_i32(dynamic raw) {
  throw UnimplementedError();
}

int? _wire2api_opt_box_autoadd_i64(dynamic raw) {
  throw UnimplementedError();
}

NewTypeInt? _wire2api_opt_box_autoadd_new_type_int(dynamic raw) {
  throw UnimplementedError();
}

bool? _wire2api_opt_box_bool(dynamic raw) {
  throw UnimplementedError();
}

ExoticOptionals? _wire2api_opt_box_exotic_optionals(dynamic raw) {
  throw UnimplementedError();
}

double? _wire2api_opt_box_f64(dynamic raw) {
  throw UnimplementedError();
}

int? _wire2api_opt_box_i32(dynamic raw) {
  throw UnimplementedError();
}

int? _wire2api_opt_box_i64(dynamic raw) {
  throw UnimplementedError();
}

int? _wire2api_opt_box_i8(dynamic raw) {
  throw UnimplementedError();
}

int? _wire2api_opt_box_u8(dynamic raw) {
  throw UnimplementedError();
}

Float32List? _wire2api_opt_float_32_list(dynamic raw) {
  throw UnimplementedError();
}

Float64List? _wire2api_opt_float_64_list(dynamic raw) {
  throw UnimplementedError();
}

Int32List? _wire2api_opt_int_32_list(dynamic raw) {
  throw UnimplementedError();
}

Int64List? _wire2api_opt_int_64_list(dynamic raw) {
  throw UnimplementedError();
}

Int8List? _wire2api_opt_int_8_list(dynamic raw) {
  throw UnimplementedError();
}

List<Attribute>? _wire2api_opt_list_attribute(dynamic raw) {
  throw UnimplementedError();
}

List<Attribute?>? _wire2api_opt_list_opt_box_autoadd_attribute(dynamic raw) {
  throw UnimplementedError();
}

Uint64List? _wire2api_opt_uint_64_list(dynamic raw) {
  throw UnimplementedError();
}

Uint8List? _wire2api_opt_uint_8_list(dynamic raw) {
  throw UnimplementedError();
}

int _wire2api_u32(dynamic raw) {
  throw UnimplementedError();
}

int _wire2api_u64(dynamic raw) {
  throw UnimplementedError();
}

int _wire2api_u8(dynamic raw) {
  throw UnimplementedError();
}

Uint64List _wire2api_uint_64_list(dynamic raw) {
  throw UnimplementedError();
}

Uint8List _wire2api_uint_8_list(dynamic raw) {
  throw UnimplementedError();
}

Weekdays _wire2api_weekdays(dynamic raw) {
  throw UnimplementedError();
}

// Section: wire structs

@JS()
@anonymous
class wire_ApplicationEnv {
  external factory wire_ApplicationEnv({
    required List<wire_ApplicationEnvVar> vars,
  });
}

@JS()
@anonymous
class wire_ApplicationEnvVar {
  external factory wire_ApplicationEnvVar({
    required String field0,
    required bool field1,
  });
}

@JS()
@anonymous
class wire_ApplicationSettings {
  external factory wire_ApplicationSettings({
    required String name,
    required String version,
    required int mode,
    required wire_ApplicationEnv env,
  });
}

@JS()
@anonymous
class wire_Attribute {
  external factory wire_Attribute({
    required String key,
    required String value,
  });
}

@JS()
@anonymous
class wire_Customized {
  external factory wire_Customized({
    required String final_field,
    String? non_final_field,
  });
}

@JS()
@anonymous
class wire_ExoticOptionals {
  external factory wire_ExoticOptionals({
    int? int32,
    BigInt? int64,
    double? float64,
    bool? boolean,
    Uint8List? zerocopy,
    Int8List? int8list,
    Uint8List? uint8list,
    Int32List? int32list,
    List<BigInt>? int64list,
    Float32List? float32list,
    Float64List? float64list,
    List<wire_Attribute>? attributes,
    required List<wire_Attribute?> attributes_nullable,
    List<wire_Attribute?>? nullable_attributes,
    wire_NewTypeInt? newtypeint,
    List<String>? string_list,
  });
}

@JS()
@anonymous
class wire_KitchenSink {
  external factory wire_KitchenSink({
    required int tag,
    dynamic kind,
  });
}

@JS()
@anonymous
class KitchenSink_Primitives {
  external factory KitchenSink_Primitives({
    required int int32,
    required double float64,
    required bool boolean,
  });
}

@JS()
@anonymous
class KitchenSink_Nested {
  external factory KitchenSink_Nested({
    required wire_KitchenSink field0,
  });
}

@JS()
@anonymous
class KitchenSink_Optional {
  external factory KitchenSink_Optional({
    int? field0,
    int? field1,
  });
}

@JS()
@anonymous
class KitchenSink_Buffer {
  external factory KitchenSink_Buffer({
    required Uint8List field0,
  });
}

@JS()
@anonymous
class KitchenSink_Enums {
  external factory KitchenSink_Enums({
    required int field0,
  });
}

@JS()
@anonymous
class wire_MySize {
  external factory wire_MySize({
    required int width,
    required int height,
  });
}

@JS()
@anonymous
class wire_MyStruct {
  external factory wire_MyStruct({
    required bool content,
  });
}

@JS()
@anonymous
class wire_MyTreeNode {
  external factory wire_MyTreeNode({
    required int value_i32,
    required Uint8List value_vec_u8,
    required bool value_boolean,
    required List<wire_MyTreeNode> children,
  });
}

@JS()
@anonymous
class wire_NewTypeInt {
  external factory wire_NewTypeInt({
    required BigInt field0,
  });
}
