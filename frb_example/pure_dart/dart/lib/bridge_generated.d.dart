// AUTO GENERATED FILE, DO NOT EDIT.
// Generated by `flutter_rust_bridge`.

// ignore_for_file: non_constant_identifier_names, unused_element, duplicate_ignore, directives_ordering, curly_braces_in_flow_control_structures, unnecessary_lambdas, slash_for_doc_comments, prefer_const_literals_to_create_immutables, implicit_dynamic_list_literal, duplicate_import, unused_import, prefer_single_quotes

import 'dart:convert';
import 'dart:typed_data';
import 'package:freezed_annotation/freezed_annotation.dart';

part 'bridge_generated.d.freezed.dart';

abstract class FlutterRustBridgeExample {
  /// Documentation on a simple adder function.
  Future<int> simpleAdder({required int a, required int b, dynamic hint});

  ///
  /// Multiline comments are fine,
  /// but they are not preferred in Rust nor in Dart.
  ///
  /// Newlines are preserved.
  ///
  Future<int> primitiveTypes(
      {required int myI32, required int myI64, required double myF64, required bool myBool, dynamic hint});

  Future<int> primitiveU32({required int myU32, dynamic hint});

  Future<String> handleString({required String s, dynamic hint});

  Future<void> handleReturnUnit({dynamic hint});

  Future<Uint8List> handleVecU8({required Uint8List v, dynamic hint});

  Future<VecOfPrimitivePack> handleVecOfPrimitive({required int n, dynamic hint});

  Future<ZeroCopyVecOfPrimitivePack> handleZeroCopyVecOfPrimitive({required int n, dynamic hint});

  Future<MySize> handleStruct({required MySize arg, required MySize boxed, dynamic hint});

  Future<NewTypeInt> handleNewtype({required NewTypeInt arg, dynamic hint});

  Future<List<MySize>> handleListOfStruct({required List<MySize> l, dynamic hint});

  Future<List<String>> handleStringList({required List<String> names, dynamic hint});

  Future<MyTreeNode> handleComplexStruct({required MyTreeNode s, dynamic hint});

  Uint8List handleSyncReturn({required String mode, dynamic hint});

  Stream<String> handleStream({required String arg, dynamic hint});

  Future<int> returnErr({dynamic hint});

  Future<int> returnPanic({dynamic hint});

  Future<double?> handleOptionalReturn({required double left, required double right, dynamic hint});

  Future<Element?> handleOptionalStruct({String? document, dynamic hint});

  Future<ExoticOptionals?> handleOptionalIncrement({ExoticOptionals? opt, dynamic hint});

  Future<double> handleIncrementBoxedOptional({double? opt, dynamic hint});

  Future<String> handleOptionBoxArguments(
      {int? i8Box,
      int? u8Box,
      int? i32Box,
      int? i64Box,
      double? f64Box,
      bool? boolbox,
      ExoticOptionals? structbox,
      dynamic hint});

  Future<Weekdays?> handleReturnEnum({required String input, dynamic hint});

  Future<Weekdays> handleEnumParameter({required Weekdays weekday, dynamic hint});

  Future<Uint64List> handleU64Vec({Uint64List? vec, dynamic hint});

  Future<void> handleCustomizedStruct({required Customized val, dynamic hint});

  Future<KitchenSink> handleEnumStruct({required KitchenSink val, dynamic hint});

  Future<bool> useImportedStruct({required MyStruct myStruct, dynamic hint});

  Future<bool> useImportedEnum({required MyEnum myEnum, dynamic hint});

  Future<ApplicationSettings> getAppSettings({dynamic hint});

  Future<bool> isAppEmbedded({required ApplicationSettings appSettings, dynamic hint});

  Future<ApplicationMessage> getMessage({dynamic hint});
}

class ApplicationEnv {
  final List<ApplicationEnvVar> vars;

  ApplicationEnv({
    required this.vars,
  });
}

class ApplicationEnvVar {
  final String field0;
  final bool field1;

  ApplicationEnvVar({
    required this.field0,
    required this.field1,
  });
}

@freezed
class ApplicationMessage with _$ApplicationMessage {
  const factory ApplicationMessage.displayMessage(
    String field0,
  ) = DisplayMessage;
  const factory ApplicationMessage.renderPixel({
    required int x,
    required int y,
  }) = RenderPixel;
  const factory ApplicationMessage.exit() = Exit;
}

enum ApplicationMode {
  Standalone,
  Embedded,
}

class ApplicationSettings {
  final String name;
  final String version;
  final ApplicationMode mode;
  final ApplicationEnv env;

  ApplicationSettings({
    required this.name,
    required this.version,
    required this.mode,
    required this.env,
  });
}

class Attribute {
  final String key;
  final String value;

  Attribute({
    required this.key,
    required this.value,
  });
}

class Customized {
  final String finalField;
  final String? nonFinalField;

  Customized({
    required this.finalField,
    this.nonFinalField,
  });
}

class Element {
  final String? tag;
  final String? text;
  final List<Attribute>? attributes;
  final List<Element>? children;

  Element({
    this.tag,
    this.text,
    this.attributes,
    this.children,
  });
}

class ExoticOptionals {
  final int? int32;
  final int? int64;
  final double? float64;
  final bool? boolean;
  final Uint8List? zerocopy;
  final Int8List? int8List;
  final Uint8List? uint8List;
  final Int32List? int32List;
  final Int64List? int64List;
  final Float32List? float32List;
  final Float64List? float64List;
  final List<Attribute>? attributes;
  final List<Attribute?> attributesNullable;
  final List<Attribute?>? nullableAttributes;
  final NewTypeInt? newtypeint;
  final List<String>? stringList;

  ExoticOptionals({
    this.int32,
    this.int64,
    this.float64,
    this.boolean,
    this.zerocopy,
    this.int8List,
    this.uint8List,
    this.int32List,
    this.int64List,
    this.float32List,
    this.float64List,
    this.attributes,
    required this.attributesNullable,
    this.nullableAttributes,
    this.newtypeint,
    this.stringList,
  });
}

@freezed
class KitchenSink with _$KitchenSink {
  /// Comment on variant
  const factory KitchenSink.empty() = Empty;
  const factory KitchenSink.primitives({
    /// Dart field comment
    required int int32,
    required double float64,
    required bool boolean,
  }) = Primitives;
  const factory KitchenSink.nested(
    KitchenSink field0,
  ) = Nested;
  const factory KitchenSink.optional([
    /// Comment on anonymous field
    int? field0,
    int? field1,
  ]) = Optional;
  const factory KitchenSink.buffer(
    Uint8List field0,
  ) = Buffer;
  const factory KitchenSink.enums(
    Weekdays field0,
  ) = Enums;
}

enum MyEnum {
  False,
  True,
}

class MySize {
  final int width;
  final int height;

  MySize({
    required this.width,
    required this.height,
  });
}

class MyStruct {
  final bool content;

  MyStruct({
    required this.content,
  });
}

class MyTreeNode {
  final int valueI32;
  final Uint8List valueVecU8;
  final bool valueBoolean;
  final List<MyTreeNode> children;

  MyTreeNode({
    required this.valueI32,
    required this.valueVecU8,
    required this.valueBoolean,
    required this.children,
  });
}

class NewTypeInt {
  final int field0;

  NewTypeInt({
    required this.field0,
  });
}

class VecOfPrimitivePack {
  final Int8List int8List;
  final Uint8List uint8List;
  final Int16List int16List;
  final Uint16List uint16List;
  final Uint32List uint32List;
  final Int32List int32List;
  final Uint64List uint64List;
  final Int64List int64List;
  final Float32List float32List;
  final Float64List float64List;

  VecOfPrimitivePack({
    required this.int8List,
    required this.uint8List,
    required this.int16List,
    required this.uint16List,
    required this.uint32List,
    required this.int32List,
    required this.uint64List,
    required this.int64List,
    required this.float32List,
    required this.float64List,
  });
}

/// Simple enums.
enum Weekdays {
  Monday,
  Tuesday,
  Wednesday,
  Thursday,
  Friday,

  /// Best day of the week.
  Saturday,
  Sunday,
}

class ZeroCopyVecOfPrimitivePack {
  final Int8List int8List;
  final Uint8List uint8List;
  final Int16List int16List;
  final Uint16List uint16List;
  final Uint32List uint32List;
  final Int32List int32List;
  final Uint64List uint64List;
  final Int64List int64List;
  final Float32List float32List;
  final Float64List float64List;

  ZeroCopyVecOfPrimitivePack({
    required this.int8List,
    required this.uint8List,
    required this.int16List,
    required this.uint16List,
    required this.uint32List,
    required this.int32List,
    required this.uint64List,
    required this.int64List,
    required this.float32List,
    required this.float64List,
  });
}
