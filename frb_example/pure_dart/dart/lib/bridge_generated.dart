// AUTO GENERATED FILE, DO NOT EDIT.
// Generated by `flutter_rust_bridge`.

// ignore_for_file: non_constant_identifier_names, unused_element, duplicate_ignore, directives_ordering, curly_braces_in_flow_control_structures, unnecessary_lambdas, slash_for_doc_comments, prefer_const_literals_to_create_immutables, implicit_dynamic_list_literal, duplicate_import, unused_import

import 'dart:convert';
import 'dart:typed_data';
import 'package:freezed_annotation/freezed_annotation.dart';

import 'dart:convert';
import 'dart:typed_data';
import 'package:flutter_rust_bridge/flutter_rust_bridge.dart';
import 'dart:ffi' as ffi;

part 'bridge_generated.freezed.dart';

abstract class FlutterRustBridgeExample {
  /// Documentation on a simple adder function.
  Future<int> simpleAdder({required int a, required int b, dynamic hint});

  ///
  /// Multiline comments are fine,
  /// but they are not preferred in Rust nor in Dart.
  ///
  /// Newlines are preserved.
  ///
  Future<int> primitiveTypes(
      {required int myI32, required int myI64, required double myF64, required bool myBool, dynamic hint});

  Future<int> primitiveU32({required int myU32, dynamic hint});

  Future<String> handleString({required String s, dynamic hint});

  Future<void> handleReturnUnit({dynamic hint});

  Future<Uint8List> handleVecU8({required Uint8List v, dynamic hint});

  Future<VecOfPrimitivePack> handleVecOfPrimitive({required int n, dynamic hint});

  Future<ZeroCopyVecOfPrimitivePack> handleZeroCopyVecOfPrimitive({required int n, dynamic hint});

  Future<MySize> handleStruct({required MySize arg, required MySize boxed, dynamic hint});

  Future<NewTypeInt> handleNewtype({required NewTypeInt arg, dynamic hint});

  Future<List<MySize>> handleListOfStruct({required List<MySize> l, dynamic hint});

  Future<List<String>> handleStringList({required List<String> names, dynamic hint});

  Future<MyTreeNode> handleComplexStruct({required MyTreeNode s, dynamic hint});

  Uint8List handleSyncReturn({required String mode, dynamic hint});

  Stream<String> handleStream({required String arg, dynamic hint});

  Future<int> returnErr({dynamic hint});

  Future<int> returnPanic({dynamic hint});

  Future<double?> handleOptionalReturn({required double left, required double right, dynamic hint});

  Future<Element?> handleOptionalStruct({String? document, dynamic hint});

  Future<ExoticOptionals?> handleOptionalIncrement({ExoticOptionals? opt, dynamic hint});

  Future<double> handleIncrementBoxedOptional({double? opt, dynamic hint});

  Future<String> handleOptionBoxArguments(
      {int? i8Box,
      int? u8Box,
      int? i32Box,
      int? i64Box,
      double? f64Box,
      bool? boolbox,
      ExoticOptionals? structbox,
      dynamic hint});

  Future<Weekdays?> handleReturnEnum({required String input, dynamic hint});

  Future<Weekdays> handleEnumParameter({required Weekdays weekday, dynamic hint});

  Future<Uint64List> handleU64Vec({Uint64List? vec, dynamic hint});

  Future<void> handleCustomizedStruct({required Customized val, dynamic hint});

  Future<KitchenSink> handleEnumStruct({required KitchenSink val, dynamic hint});

  Future<bool> useImportedStruct({required MyStruct myStruct, dynamic hint});

  Future<bool> useImportedEnum({required MyEnum myEnum, dynamic hint});

  Future<ApplicationSettings> getAppSettings({dynamic hint});

  Future<bool> isAppEmbedded({required ApplicationSettings appSettings, dynamic hint});
}

class ApplicationEnv {
  final List<String> vars;

  ApplicationEnv({
    required this.vars,
  });
}

enum ApplicationMode {
  Standalone,
  Embedded,
}

class ApplicationSettings {
  final String name;
  final String version;
  final ApplicationMode mode;
  final ApplicationEnv env;

  ApplicationSettings({
    required this.name,
    required this.version,
    required this.mode,
    required this.env,
  });
}

class Attribute {
  final String key;
  final String value;

  Attribute({
    required this.key,
    required this.value,
  });
}

class Customized {
  final String finalField;
  final String? nonFinalField;

  Customized({
    required this.finalField,
    this.nonFinalField,
  });
}

class Element {
  final String? tag;
  final String? text;
  final List<Attribute>? attributes;
  final List<Element>? children;

  Element({
    this.tag,
    this.text,
    this.attributes,
    this.children,
  });
}

class ExoticOptionals {
  final int? int32;
  final int? int64;
  final double? float64;
  final bool? boolean;
  final Uint8List? zerocopy;
  final Int8List? int8List;
  final Uint8List? uint8List;
  final Int32List? int32List;
  final Int64List? int64List;
  final Float32List? float32List;
  final Float64List? float64List;
  final List<Attribute>? attributes;
  final List<Attribute?> attributesNullable;
  final List<Attribute?>? nullableAttributes;
  final NewTypeInt? newtypeint;
  final List<String>? stringList;

  ExoticOptionals({
    this.int32,
    this.int64,
    this.float64,
    this.boolean,
    this.zerocopy,
    this.int8List,
    this.uint8List,
    this.int32List,
    this.int64List,
    this.float32List,
    this.float64List,
    this.attributes,
    required this.attributesNullable,
    this.nullableAttributes,
    this.newtypeint,
    this.stringList,
  });
}

@freezed
class KitchenSink with _$KitchenSink {
  /// Comment on variant
  const factory KitchenSink.empty() = Empty;
  const factory KitchenSink.primitives({
    /// Dart field comment
    required int int32,
    required double float64,
    required bool boolean,
  }) = Primitives;
  const factory KitchenSink.nested(
    KitchenSink field0,
  ) = Nested;
  const factory KitchenSink.optional([
    /// Comment on anonymous field
    int? field0,
    int? field1,
  ]) = Optional;
  const factory KitchenSink.buffer(
    Uint8List field0,
  ) = Buffer;
  const factory KitchenSink.enums(
    Weekdays field0,
  ) = Enums;
}

enum MyEnum {
  False,
  True,
}

class MySize {
  final int width;
  final int height;

  MySize({
    required this.width,
    required this.height,
  });
}

class MyStruct {
  final bool content;

  MyStruct({
    required this.content,
  });
}

class MyTreeNode {
  final int valueI32;
  final Uint8List valueVecU8;
  final bool valueBoolean;
  final List<MyTreeNode> children;

  MyTreeNode({
    required this.valueI32,
    required this.valueVecU8,
    required this.valueBoolean,
    required this.children,
  });
}

class NewTypeInt {
  final int field0;

  NewTypeInt({
    required this.field0,
  });
}

class VecOfPrimitivePack {
  final Int8List int8List;
  final Uint8List uint8List;
  final Int16List int16List;
  final Uint16List uint16List;
  final Uint32List uint32List;
  final Int32List int32List;
  final Uint64List uint64List;
  final Int64List int64List;
  final Float32List float32List;
  final Float64List float64List;

  VecOfPrimitivePack({
    required this.int8List,
    required this.uint8List,
    required this.int16List,
    required this.uint16List,
    required this.uint32List,
    required this.int32List,
    required this.uint64List,
    required this.int64List,
    required this.float32List,
    required this.float64List,
  });
}

/// Simple enums.
enum Weekdays {
  Monday,
  Tuesday,
  Wednesday,
  Thursday,
  Friday,

  /// Best day of the week.
  Saturday,
  Sunday,
}

class ZeroCopyVecOfPrimitivePack {
  final Int8List int8List;
  final Uint8List uint8List;
  final Int16List int16List;
  final Uint16List uint16List;
  final Uint32List uint32List;
  final Int32List int32List;
  final Uint64List uint64List;
  final Int64List int64List;
  final Float32List float32List;
  final Float64List float64List;

  ZeroCopyVecOfPrimitivePack({
    required this.int8List,
    required this.uint8List,
    required this.int16List,
    required this.uint16List,
    required this.uint32List,
    required this.int32List,
    required this.uint64List,
    required this.int64List,
    required this.float32List,
    required this.float64List,
  });
}

class FlutterRustBridgeExampleImpl extends FlutterRustBridgeBase<FlutterRustBridgeExampleWire>
    implements FlutterRustBridgeExample {
  factory FlutterRustBridgeExampleImpl(ffi.DynamicLibrary dylib) =>
      FlutterRustBridgeExampleImpl.raw(FlutterRustBridgeExampleWire(dylib));

  FlutterRustBridgeExampleImpl.raw(FlutterRustBridgeExampleWire inner) : super(inner);

  Future<int> simpleAdder({required int a, required int b, dynamic hint}) => executeNormal(FlutterRustBridgeTask(
        callFfi: (port_) => inner.wire_simple_adder(port_, _api2wire_i32(a), _api2wire_i32(b)),
        parseSuccessData: _wire2api_i32,
        constMeta: const FlutterRustBridgeTaskConstMeta(
          debugName: "simple_adder",
          argNames: ["a", "b"],
        ),
        argValues: [a, b],
        hint: hint,
      ));

  Future<int> primitiveTypes(
          {required int myI32, required int myI64, required double myF64, required bool myBool, dynamic hint}) =>
      executeNormal(FlutterRustBridgeTask(
        callFfi: (port_) =>
            inner.wire_primitive_types(port_, _api2wire_i32(myI32), _api2wire_i64(myI64), _api2wire_f64(myF64), myBool),
        parseSuccessData: _wire2api_i32,
        constMeta: const FlutterRustBridgeTaskConstMeta(
          debugName: "primitive_types",
          argNames: ["myI32", "myI64", "myF64", "myBool"],
        ),
        argValues: [myI32, myI64, myF64, myBool],
        hint: hint,
      ));

  Future<int> primitiveU32({required int myU32, dynamic hint}) => executeNormal(FlutterRustBridgeTask(
        callFfi: (port_) => inner.wire_primitive_u32(port_, _api2wire_u32(myU32)),
        parseSuccessData: _wire2api_u32,
        constMeta: const FlutterRustBridgeTaskConstMeta(
          debugName: "primitive_u32",
          argNames: ["myU32"],
        ),
        argValues: [myU32],
        hint: hint,
      ));

  Future<String> handleString({required String s, dynamic hint}) => executeNormal(FlutterRustBridgeTask(
        callFfi: (port_) => inner.wire_handle_string(port_, _api2wire_String(s)),
        parseSuccessData: _wire2api_String,
        constMeta: const FlutterRustBridgeTaskConstMeta(
          debugName: "handle_string",
          argNames: ["s"],
        ),
        argValues: [s],
        hint: hint,
      ));

  Future<void> handleReturnUnit({dynamic hint}) => executeNormal(FlutterRustBridgeTask(
        callFfi: (port_) => inner.wire_handle_return_unit(port_),
        parseSuccessData: _wire2api_unit,
        constMeta: const FlutterRustBridgeTaskConstMeta(
          debugName: "handle_return_unit",
          argNames: [],
        ),
        argValues: [],
        hint: hint,
      ));

  Future<Uint8List> handleVecU8({required Uint8List v, dynamic hint}) => executeNormal(FlutterRustBridgeTask(
        callFfi: (port_) => inner.wire_handle_vec_u8(port_, _api2wire_uint_8_list(v)),
        parseSuccessData: _wire2api_uint_8_list,
        constMeta: const FlutterRustBridgeTaskConstMeta(
          debugName: "handle_vec_u8",
          argNames: ["v"],
        ),
        argValues: [v],
        hint: hint,
      ));

  Future<VecOfPrimitivePack> handleVecOfPrimitive({required int n, dynamic hint}) =>
      executeNormal(FlutterRustBridgeTask(
        callFfi: (port_) => inner.wire_handle_vec_of_primitive(port_, _api2wire_i32(n)),
        parseSuccessData: _wire2api_vec_of_primitive_pack,
        constMeta: const FlutterRustBridgeTaskConstMeta(
          debugName: "handle_vec_of_primitive",
          argNames: ["n"],
        ),
        argValues: [n],
        hint: hint,
      ));

  Future<ZeroCopyVecOfPrimitivePack> handleZeroCopyVecOfPrimitive({required int n, dynamic hint}) =>
      executeNormal(FlutterRustBridgeTask(
        callFfi: (port_) => inner.wire_handle_zero_copy_vec_of_primitive(port_, _api2wire_i32(n)),
        parseSuccessData: _wire2api_zero_copy_vec_of_primitive_pack,
        constMeta: const FlutterRustBridgeTaskConstMeta(
          debugName: "handle_zero_copy_vec_of_primitive",
          argNames: ["n"],
        ),
        argValues: [n],
        hint: hint,
      ));

  Future<MySize> handleStruct({required MySize arg, required MySize boxed, dynamic hint}) =>
      executeNormal(FlutterRustBridgeTask(
        callFfi: (port_) =>
            inner.wire_handle_struct(port_, _api2wire_box_autoadd_my_size(arg), _api2wire_box_my_size(boxed)),
        parseSuccessData: _wire2api_my_size,
        constMeta: const FlutterRustBridgeTaskConstMeta(
          debugName: "handle_struct",
          argNames: ["arg", "boxed"],
        ),
        argValues: [arg, boxed],
        hint: hint,
      ));

  Future<NewTypeInt> handleNewtype({required NewTypeInt arg, dynamic hint}) => executeNormal(FlutterRustBridgeTask(
        callFfi: (port_) => inner.wire_handle_newtype(port_, _api2wire_box_autoadd_new_type_int(arg)),
        parseSuccessData: _wire2api_new_type_int,
        constMeta: const FlutterRustBridgeTaskConstMeta(
          debugName: "handle_newtype",
          argNames: ["arg"],
        ),
        argValues: [arg],
        hint: hint,
      ));

  Future<List<MySize>> handleListOfStruct({required List<MySize> l, dynamic hint}) =>
      executeNormal(FlutterRustBridgeTask(
        callFfi: (port_) => inner.wire_handle_list_of_struct(port_, _api2wire_list_my_size(l)),
        parseSuccessData: _wire2api_list_my_size,
        constMeta: const FlutterRustBridgeTaskConstMeta(
          debugName: "handle_list_of_struct",
          argNames: ["l"],
        ),
        argValues: [l],
        hint: hint,
      ));

  Future<List<String>> handleStringList({required List<String> names, dynamic hint}) =>
      executeNormal(FlutterRustBridgeTask(
        callFfi: (port_) => inner.wire_handle_string_list(port_, _api2wire_StringList(names)),
        parseSuccessData: _wire2api_StringList,
        constMeta: const FlutterRustBridgeTaskConstMeta(
          debugName: "handle_string_list",
          argNames: ["names"],
        ),
        argValues: [names],
        hint: hint,
      ));

  Future<MyTreeNode> handleComplexStruct({required MyTreeNode s, dynamic hint}) => executeNormal(FlutterRustBridgeTask(
        callFfi: (port_) => inner.wire_handle_complex_struct(port_, _api2wire_box_autoadd_my_tree_node(s)),
        parseSuccessData: _wire2api_my_tree_node,
        constMeta: const FlutterRustBridgeTaskConstMeta(
          debugName: "handle_complex_struct",
          argNames: ["s"],
        ),
        argValues: [s],
        hint: hint,
      ));

  Uint8List handleSyncReturn({required String mode, dynamic hint}) => executeSync(FlutterRustBridgeSyncTask(
        callFfi: () => inner.wire_handle_sync_return(_api2wire_String(mode)),
        constMeta: const FlutterRustBridgeTaskConstMeta(
          debugName: "handle_sync_return",
          argNames: ["mode"],
        ),
        argValues: [mode],
        hint: hint,
      ));

  Stream<String> handleStream({required String arg, dynamic hint}) => executeStream(FlutterRustBridgeTask(
        callFfi: (port_) => inner.wire_handle_stream(port_, _api2wire_String(arg)),
        parseSuccessData: _wire2api_String,
        constMeta: const FlutterRustBridgeTaskConstMeta(
          debugName: "handle_stream",
          argNames: ["arg"],
        ),
        argValues: [arg],
        hint: hint,
      ));

  Future<int> returnErr({dynamic hint}) => executeNormal(FlutterRustBridgeTask(
        callFfi: (port_) => inner.wire_return_err(port_),
        parseSuccessData: _wire2api_i32,
        constMeta: const FlutterRustBridgeTaskConstMeta(
          debugName: "return_err",
          argNames: [],
        ),
        argValues: [],
        hint: hint,
      ));

  Future<int> returnPanic({dynamic hint}) => executeNormal(FlutterRustBridgeTask(
        callFfi: (port_) => inner.wire_return_panic(port_),
        parseSuccessData: _wire2api_i32,
        constMeta: const FlutterRustBridgeTaskConstMeta(
          debugName: "return_panic",
          argNames: [],
        ),
        argValues: [],
        hint: hint,
      ));

  Future<double?> handleOptionalReturn({required double left, required double right, dynamic hint}) =>
      executeNormal(FlutterRustBridgeTask(
        callFfi: (port_) => inner.wire_handle_optional_return(port_, _api2wire_f64(left), _api2wire_f64(right)),
        parseSuccessData: _wire2api_opt_box_autoadd_f64,
        constMeta: const FlutterRustBridgeTaskConstMeta(
          debugName: "handle_optional_return",
          argNames: ["left", "right"],
        ),
        argValues: [left, right],
        hint: hint,
      ));

  Future<Element?> handleOptionalStruct({String? document, dynamic hint}) => executeNormal(FlutterRustBridgeTask(
        callFfi: (port_) => inner.wire_handle_optional_struct(port_, _api2wire_opt_String(document)),
        parseSuccessData: _wire2api_opt_box_autoadd_element,
        constMeta: const FlutterRustBridgeTaskConstMeta(
          debugName: "handle_optional_struct",
          argNames: ["document"],
        ),
        argValues: [document],
        hint: hint,
      ));

  Future<ExoticOptionals?> handleOptionalIncrement({ExoticOptionals? opt, dynamic hint}) =>
      executeNormal(FlutterRustBridgeTask(
        callFfi: (port_) =>
            inner.wire_handle_optional_increment(port_, _api2wire_opt_box_autoadd_exotic_optionals(opt)),
        parseSuccessData: _wire2api_opt_box_autoadd_exotic_optionals,
        constMeta: const FlutterRustBridgeTaskConstMeta(
          debugName: "handle_optional_increment",
          argNames: ["opt"],
        ),
        argValues: [opt],
        hint: hint,
      ));

  Future<double> handleIncrementBoxedOptional({double? opt, dynamic hint}) => executeNormal(FlutterRustBridgeTask(
        callFfi: (port_) => inner.wire_handle_increment_boxed_optional(port_, _api2wire_opt_box_f64(opt)),
        parseSuccessData: _wire2api_f64,
        constMeta: const FlutterRustBridgeTaskConstMeta(
          debugName: "handle_increment_boxed_optional",
          argNames: ["opt"],
        ),
        argValues: [opt],
        hint: hint,
      ));

  Future<String> handleOptionBoxArguments(
          {int? i8Box,
          int? u8Box,
          int? i32Box,
          int? i64Box,
          double? f64Box,
          bool? boolbox,
          ExoticOptionals? structbox,
          dynamic hint}) =>
      executeNormal(FlutterRustBridgeTask(
        callFfi: (port_) => inner.wire_handle_option_box_arguments(
            port_,
            _api2wire_opt_box_i8(i8Box),
            _api2wire_opt_box_u8(u8Box),
            _api2wire_opt_box_i32(i32Box),
            _api2wire_opt_box_i64(i64Box),
            _api2wire_opt_box_f64(f64Box),
            _api2wire_opt_box_bool(boolbox),
            _api2wire_opt_box_exotic_optionals(structbox)),
        parseSuccessData: _wire2api_String,
        constMeta: const FlutterRustBridgeTaskConstMeta(
          debugName: "handle_option_box_arguments",
          argNames: ["i8Box", "u8Box", "i32Box", "i64Box", "f64Box", "boolbox", "structbox"],
        ),
        argValues: [i8Box, u8Box, i32Box, i64Box, f64Box, boolbox, structbox],
        hint: hint,
      ));

  Future<Weekdays?> handleReturnEnum({required String input, dynamic hint}) => executeNormal(FlutterRustBridgeTask(
        callFfi: (port_) => inner.wire_handle_return_enum(port_, _api2wire_String(input)),
        parseSuccessData: _wire2api_opt_weekdays,
        constMeta: const FlutterRustBridgeTaskConstMeta(
          debugName: "handle_return_enum",
          argNames: ["input"],
        ),
        argValues: [input],
        hint: hint,
      ));

  Future<Weekdays> handleEnumParameter({required Weekdays weekday, dynamic hint}) =>
      executeNormal(FlutterRustBridgeTask(
        callFfi: (port_) => inner.wire_handle_enum_parameter(port_, _api2wire_weekdays(weekday)),
        parseSuccessData: _wire2api_weekdays,
        constMeta: const FlutterRustBridgeTaskConstMeta(
          debugName: "handle_enum_parameter",
          argNames: ["weekday"],
        ),
        argValues: [weekday],
        hint: hint,
      ));

  Future<Uint64List> handleU64Vec({Uint64List? vec, dynamic hint}) => executeNormal(FlutterRustBridgeTask(
        callFfi: (port_) => inner.wire_handle_u64_vec(port_, _api2wire_opt_uint_64_list(vec)),
        parseSuccessData: _wire2api_uint_64_list,
        constMeta: const FlutterRustBridgeTaskConstMeta(
          debugName: "handle_u64_vec",
          argNames: ["vec"],
        ),
        argValues: [vec],
        hint: hint,
      ));

  Future<void> handleCustomizedStruct({required Customized val, dynamic hint}) => executeNormal(FlutterRustBridgeTask(
        callFfi: (port_) => inner.wire_handle_customized_struct(port_, _api2wire_box_autoadd_customized(val)),
        parseSuccessData: _wire2api_unit,
        constMeta: const FlutterRustBridgeTaskConstMeta(
          debugName: "handle_customized_struct",
          argNames: ["val"],
        ),
        argValues: [val],
        hint: hint,
      ));

  Future<KitchenSink> handleEnumStruct({required KitchenSink val, dynamic hint}) => executeNormal(FlutterRustBridgeTask(
        callFfi: (port_) => inner.wire_handle_enum_struct(port_, _api2wire_box_autoadd_kitchen_sink(val)),
        parseSuccessData: _wire2api_kitchen_sink,
        constMeta: const FlutterRustBridgeTaskConstMeta(
          debugName: "handle_enum_struct",
          argNames: ["val"],
        ),
        argValues: [val],
        hint: hint,
      ));

  Future<bool> useImportedStruct({required MyStruct myStruct, dynamic hint}) => executeNormal(FlutterRustBridgeTask(
        callFfi: (port_) => inner.wire_use_imported_struct(port_, _api2wire_box_autoadd_my_struct(myStruct)),
        parseSuccessData: _wire2api_bool,
        constMeta: const FlutterRustBridgeTaskConstMeta(
          debugName: "use_imported_struct",
          argNames: ["myStruct"],
        ),
        argValues: [myStruct],
        hint: hint,
      ));

  Future<bool> useImportedEnum({required MyEnum myEnum, dynamic hint}) => executeNormal(FlutterRustBridgeTask(
        callFfi: (port_) => inner.wire_use_imported_enum(port_, _api2wire_my_enum(myEnum)),
        parseSuccessData: _wire2api_bool,
        constMeta: const FlutterRustBridgeTaskConstMeta(
          debugName: "use_imported_enum",
          argNames: ["myEnum"],
        ),
        argValues: [myEnum],
        hint: hint,
      ));

  Future<ApplicationSettings> getAppSettings({dynamic hint}) => executeNormal(FlutterRustBridgeTask(
        callFfi: (port_) => inner.wire_get_app_settings(port_),
        parseSuccessData: _wire2api_application_settings,
        constMeta: const FlutterRustBridgeTaskConstMeta(
          debugName: "get_app_settings",
          argNames: [],
        ),
        argValues: [],
        hint: hint,
      ));

  Future<bool> isAppEmbedded({required ApplicationSettings appSettings, dynamic hint}) =>
      executeNormal(FlutterRustBridgeTask(
        callFfi: (port_) => inner.wire_is_app_embedded(port_, _api2wire_box_autoadd_application_settings(appSettings)),
        parseSuccessData: _wire2api_bool,
        constMeta: const FlutterRustBridgeTaskConstMeta(
          debugName: "is_app_embedded",
          argNames: ["appSettings"],
        ),
        argValues: [appSettings],
        hint: hint,
      ));

  // Section: api2wire
  ffi.Pointer<wire_uint_8_list> _api2wire_String(String raw) {
    return _api2wire_uint_8_list(utf8.encoder.convert(raw));
  }

  ffi.Pointer<wire_StringList> _api2wire_StringList(List<String> raw) {
    final ans = inner.new_StringList(raw.length);
    for (var i = 0; i < raw.length; i++) {
      ans.ref.ptr[i] = _api2wire_String(raw[i]);
    }
    return ans;
  }

  ffi.Pointer<wire_uint_8_list> _api2wire_ZeroCopyBuffer_Uint8List(Uint8List raw) {
    return _api2wire_uint_8_list(raw);
  }

  int _api2wire_application_mode(ApplicationMode raw) {
    return raw.index;
  }

  int _api2wire_bool(bool raw) {
    return raw ? 1 : 0;
  }

  ffi.Pointer<wire_ApplicationEnv> _api2wire_box_application_env(ApplicationEnv raw) {
    final ptr = inner.new_box_application_env();
    _api_fill_to_wire_application_env(raw, ptr.ref);
    return ptr;
  }

  ffi.Pointer<wire_ApplicationSettings> _api2wire_box_autoadd_application_settings(ApplicationSettings raw) {
    final ptr = inner.new_box_autoadd_application_settings();
    _api_fill_to_wire_application_settings(raw, ptr.ref);
    return ptr;
  }

  ffi.Pointer<wire_Attribute> _api2wire_box_autoadd_attribute(Attribute raw) {
    final ptr = inner.new_box_autoadd_attribute();
    _api_fill_to_wire_attribute(raw, ptr.ref);
    return ptr;
  }

  ffi.Pointer<ffi.Uint8> _api2wire_box_autoadd_bool(bool raw) {
    return inner.new_box_autoadd_bool(raw);
  }

  ffi.Pointer<wire_Customized> _api2wire_box_autoadd_customized(Customized raw) {
    final ptr = inner.new_box_autoadd_customized();
    _api_fill_to_wire_customized(raw, ptr.ref);
    return ptr;
  }

  ffi.Pointer<wire_ExoticOptionals> _api2wire_box_autoadd_exotic_optionals(ExoticOptionals raw) {
    final ptr = inner.new_box_autoadd_exotic_optionals();
    _api_fill_to_wire_exotic_optionals(raw, ptr.ref);
    return ptr;
  }

  ffi.Pointer<ffi.Double> _api2wire_box_autoadd_f64(double raw) {
    return inner.new_box_autoadd_f64(raw);
  }

  ffi.Pointer<ffi.Int32> _api2wire_box_autoadd_i32(int raw) {
    return inner.new_box_autoadd_i32(raw);
  }

  ffi.Pointer<ffi.Int64> _api2wire_box_autoadd_i64(int raw) {
    return inner.new_box_autoadd_i64(raw);
  }

  ffi.Pointer<wire_KitchenSink> _api2wire_box_autoadd_kitchen_sink(KitchenSink raw) {
    final ptr = inner.new_box_autoadd_kitchen_sink();
    _api_fill_to_wire_kitchen_sink(raw, ptr.ref);
    return ptr;
  }

  ffi.Pointer<wire_MySize> _api2wire_box_autoadd_my_size(MySize raw) {
    final ptr = inner.new_box_autoadd_my_size();
    _api_fill_to_wire_my_size(raw, ptr.ref);
    return ptr;
  }

  ffi.Pointer<wire_MyStruct> _api2wire_box_autoadd_my_struct(MyStruct raw) {
    final ptr = inner.new_box_autoadd_my_struct();
    _api_fill_to_wire_my_struct(raw, ptr.ref);
    return ptr;
  }

  ffi.Pointer<wire_MyTreeNode> _api2wire_box_autoadd_my_tree_node(MyTreeNode raw) {
    final ptr = inner.new_box_autoadd_my_tree_node();
    _api_fill_to_wire_my_tree_node(raw, ptr.ref);
    return ptr;
  }

  ffi.Pointer<wire_NewTypeInt> _api2wire_box_autoadd_new_type_int(NewTypeInt raw) {
    final ptr = inner.new_box_autoadd_new_type_int();
    _api_fill_to_wire_new_type_int(raw, ptr.ref);
    return ptr;
  }

  ffi.Pointer<ffi.Uint8> _api2wire_box_bool(bool raw) {
    return inner.new_box_bool(raw);
  }

  ffi.Pointer<wire_ExoticOptionals> _api2wire_box_exotic_optionals(ExoticOptionals raw) {
    final ptr = inner.new_box_exotic_optionals();
    _api_fill_to_wire_exotic_optionals(raw, ptr.ref);
    return ptr;
  }

  ffi.Pointer<ffi.Double> _api2wire_box_f64(double raw) {
    return inner.new_box_f64(raw);
  }

  ffi.Pointer<ffi.Int32> _api2wire_box_i32(int raw) {
    return inner.new_box_i32(raw);
  }

  ffi.Pointer<ffi.Int64> _api2wire_box_i64(int raw) {
    return inner.new_box_i64(raw);
  }

  ffi.Pointer<ffi.Int8> _api2wire_box_i8(int raw) {
    return inner.new_box_i8(raw);
  }

  ffi.Pointer<wire_KitchenSink> _api2wire_box_kitchen_sink(KitchenSink raw) {
    final ptr = inner.new_box_kitchen_sink();
    _api_fill_to_wire_kitchen_sink(raw, ptr.ref);
    return ptr;
  }

  ffi.Pointer<wire_MySize> _api2wire_box_my_size(MySize raw) {
    final ptr = inner.new_box_my_size();
    _api_fill_to_wire_my_size(raw, ptr.ref);
    return ptr;
  }

  ffi.Pointer<ffi.Uint8> _api2wire_box_u8(int raw) {
    return inner.new_box_u8(raw);
  }

  double _api2wire_f32(double raw) {
    return raw;
  }

  double _api2wire_f64(double raw) {
    return raw;
  }

  ffi.Pointer<wire_float_32_list> _api2wire_float_32_list(Float32List raw) {
    final ans = inner.new_float_32_list(raw.length);
    ans.ref.ptr.asTypedList(raw.length).setAll(0, raw);
    return ans;
  }

  ffi.Pointer<wire_float_64_list> _api2wire_float_64_list(Float64List raw) {
    final ans = inner.new_float_64_list(raw.length);
    ans.ref.ptr.asTypedList(raw.length).setAll(0, raw);
    return ans;
  }

  int _api2wire_i32(int raw) {
    return raw;
  }

  int _api2wire_i64(int raw) {
    return raw;
  }

  int _api2wire_i8(int raw) {
    return raw;
  }

  ffi.Pointer<wire_int_32_list> _api2wire_int_32_list(Int32List raw) {
    final ans = inner.new_int_32_list(raw.length);
    ans.ref.ptr.asTypedList(raw.length).setAll(0, raw);
    return ans;
  }

  ffi.Pointer<wire_int_64_list> _api2wire_int_64_list(Int64List raw) {
    final ans = inner.new_int_64_list(raw.length);
    ans.ref.ptr.asTypedList(raw.length).setAll(0, raw);
    return ans;
  }

  ffi.Pointer<wire_int_8_list> _api2wire_int_8_list(Int8List raw) {
    final ans = inner.new_int_8_list(raw.length);
    ans.ref.ptr.asTypedList(raw.length).setAll(0, raw);
    return ans;
  }

  ffi.Pointer<wire_list_attribute> _api2wire_list_attribute(List<Attribute> raw) {
    final ans = inner.new_list_attribute(raw.length);
    for (var i = 0; i < raw.length; ++i) {
      _api_fill_to_wire_attribute(raw[i], ans.ref.ptr[i]);
    }
    return ans;
  }

  ffi.Pointer<wire_list_my_size> _api2wire_list_my_size(List<MySize> raw) {
    final ans = inner.new_list_my_size(raw.length);
    for (var i = 0; i < raw.length; ++i) {
      _api_fill_to_wire_my_size(raw[i], ans.ref.ptr[i]);
    }
    return ans;
  }

  ffi.Pointer<wire_list_my_tree_node> _api2wire_list_my_tree_node(List<MyTreeNode> raw) {
    final ans = inner.new_list_my_tree_node(raw.length);
    for (var i = 0; i < raw.length; ++i) {
      _api_fill_to_wire_my_tree_node(raw[i], ans.ref.ptr[i]);
    }
    return ans;
  }

  ffi.Pointer<wire_list_opt_box_autoadd_attribute> _api2wire_list_opt_box_autoadd_attribute(List<Attribute?> raw) {
    final ans = inner.new_list_opt_box_autoadd_attribute(raw.length);
    for (var i = 0; i < raw.length; ++i) {
      _api_fill_to_wire_opt_box_autoadd_attribute(raw[i], ans.ref.ptr[i]);
    }
    return ans;
  }

  int _api2wire_my_enum(MyEnum raw) {
    return raw.index;
  }

  ffi.Pointer<wire_uint_8_list> _api2wire_opt_String(String? raw) {
    return raw == null ? ffi.nullptr : _api2wire_String(raw);
  }

  ffi.Pointer<wire_StringList> _api2wire_opt_StringList(List<String>? raw) {
    return raw == null ? ffi.nullptr : _api2wire_StringList(raw);
  }

  ffi.Pointer<wire_uint_8_list> _api2wire_opt_ZeroCopyBuffer_Uint8List(Uint8List? raw) {
    return raw == null ? ffi.nullptr : _api2wire_ZeroCopyBuffer_Uint8List(raw);
  }

  ffi.Pointer<wire_Attribute> _api2wire_opt_box_autoadd_attribute(Attribute? raw) {
    return raw == null ? ffi.nullptr : _api2wire_box_autoadd_attribute(raw);
  }

  ffi.Pointer<ffi.Uint8> _api2wire_opt_box_autoadd_bool(bool? raw) {
    return raw == null ? ffi.nullptr : _api2wire_box_autoadd_bool(raw);
  }

  ffi.Pointer<wire_ExoticOptionals> _api2wire_opt_box_autoadd_exotic_optionals(ExoticOptionals? raw) {
    return raw == null ? ffi.nullptr : _api2wire_box_autoadd_exotic_optionals(raw);
  }

  ffi.Pointer<ffi.Double> _api2wire_opt_box_autoadd_f64(double? raw) {
    return raw == null ? ffi.nullptr : _api2wire_box_autoadd_f64(raw);
  }

  ffi.Pointer<ffi.Int32> _api2wire_opt_box_autoadd_i32(int? raw) {
    return raw == null ? ffi.nullptr : _api2wire_box_autoadd_i32(raw);
  }

  ffi.Pointer<ffi.Int64> _api2wire_opt_box_autoadd_i64(int? raw) {
    return raw == null ? ffi.nullptr : _api2wire_box_autoadd_i64(raw);
  }

  ffi.Pointer<wire_NewTypeInt> _api2wire_opt_box_autoadd_new_type_int(NewTypeInt? raw) {
    return raw == null ? ffi.nullptr : _api2wire_box_autoadd_new_type_int(raw);
  }

  ffi.Pointer<ffi.Uint8> _api2wire_opt_box_bool(bool? raw) {
    return raw == null ? ffi.nullptr : _api2wire_box_bool(raw);
  }

  ffi.Pointer<wire_ExoticOptionals> _api2wire_opt_box_exotic_optionals(ExoticOptionals? raw) {
    return raw == null ? ffi.nullptr : _api2wire_box_exotic_optionals(raw);
  }

  ffi.Pointer<ffi.Double> _api2wire_opt_box_f64(double? raw) {
    return raw == null ? ffi.nullptr : _api2wire_box_f64(raw);
  }

  ffi.Pointer<ffi.Int32> _api2wire_opt_box_i32(int? raw) {
    return raw == null ? ffi.nullptr : _api2wire_box_i32(raw);
  }

  ffi.Pointer<ffi.Int64> _api2wire_opt_box_i64(int? raw) {
    return raw == null ? ffi.nullptr : _api2wire_box_i64(raw);
  }

  ffi.Pointer<ffi.Int8> _api2wire_opt_box_i8(int? raw) {
    return raw == null ? ffi.nullptr : _api2wire_box_i8(raw);
  }

  ffi.Pointer<ffi.Uint8> _api2wire_opt_box_u8(int? raw) {
    return raw == null ? ffi.nullptr : _api2wire_box_u8(raw);
  }

  ffi.Pointer<wire_float_32_list> _api2wire_opt_float_32_list(Float32List? raw) {
    return raw == null ? ffi.nullptr : _api2wire_float_32_list(raw);
  }

  ffi.Pointer<wire_float_64_list> _api2wire_opt_float_64_list(Float64List? raw) {
    return raw == null ? ffi.nullptr : _api2wire_float_64_list(raw);
  }

  ffi.Pointer<wire_int_32_list> _api2wire_opt_int_32_list(Int32List? raw) {
    return raw == null ? ffi.nullptr : _api2wire_int_32_list(raw);
  }

  ffi.Pointer<wire_int_64_list> _api2wire_opt_int_64_list(Int64List? raw) {
    return raw == null ? ffi.nullptr : _api2wire_int_64_list(raw);
  }

  ffi.Pointer<wire_int_8_list> _api2wire_opt_int_8_list(Int8List? raw) {
    return raw == null ? ffi.nullptr : _api2wire_int_8_list(raw);
  }

  ffi.Pointer<wire_list_attribute> _api2wire_opt_list_attribute(List<Attribute>? raw) {
    return raw == null ? ffi.nullptr : _api2wire_list_attribute(raw);
  }

  ffi.Pointer<wire_list_opt_box_autoadd_attribute> _api2wire_opt_list_opt_box_autoadd_attribute(List<Attribute?>? raw) {
    return raw == null ? ffi.nullptr : _api2wire_list_opt_box_autoadd_attribute(raw);
  }

  ffi.Pointer<wire_uint_64_list> _api2wire_opt_uint_64_list(Uint64List? raw) {
    return raw == null ? ffi.nullptr : _api2wire_uint_64_list(raw);
  }

  ffi.Pointer<wire_uint_8_list> _api2wire_opt_uint_8_list(Uint8List? raw) {
    return raw == null ? ffi.nullptr : _api2wire_uint_8_list(raw);
  }

  int _api2wire_u32(int raw) {
    return raw;
  }

  int _api2wire_u64(int raw) {
    return raw;
  }

  int _api2wire_u8(int raw) {
    return raw;
  }

  ffi.Pointer<wire_uint_64_list> _api2wire_uint_64_list(Uint64List raw) {
    final ans = inner.new_uint_64_list(raw.length);
    ans.ref.ptr.asTypedList(raw.length).setAll(0, raw);
    return ans;
  }

  ffi.Pointer<wire_uint_8_list> _api2wire_uint_8_list(Uint8List raw) {
    final ans = inner.new_uint_8_list(raw.length);
    ans.ref.ptr.asTypedList(raw.length).setAll(0, raw);
    return ans;
  }

  int _api2wire_weekdays(Weekdays raw) {
    return raw.index;
  }

  // Section: api_fill_to_wire

  void _api_fill_to_wire_application_env(ApplicationEnv apiObj, wire_ApplicationEnv wireObj) {
    wireObj.vars = _api2wire_StringList(apiObj.vars);
  }

  void _api_fill_to_wire_application_settings(ApplicationSettings apiObj, wire_ApplicationSettings wireObj) {
    wireObj.name = _api2wire_String(apiObj.name);
    wireObj.version = _api2wire_String(apiObj.version);
    wireObj.mode = _api2wire_application_mode(apiObj.mode);
    wireObj.env = _api2wire_box_application_env(apiObj.env);
  }

  void _api_fill_to_wire_attribute(Attribute apiObj, wire_Attribute wireObj) {
    wireObj.key = _api2wire_String(apiObj.key);
    wireObj.value = _api2wire_String(apiObj.value);
  }

  void _api_fill_to_wire_box_application_env(ApplicationEnv apiObj, ffi.Pointer<wire_ApplicationEnv> wireObj) {
    _api_fill_to_wire_application_env(apiObj, wireObj.ref);
  }

  void _api_fill_to_wire_box_autoadd_application_settings(
      ApplicationSettings apiObj, ffi.Pointer<wire_ApplicationSettings> wireObj) {
    _api_fill_to_wire_application_settings(apiObj, wireObj.ref);
  }

  void _api_fill_to_wire_box_autoadd_attribute(Attribute apiObj, ffi.Pointer<wire_Attribute> wireObj) {
    _api_fill_to_wire_attribute(apiObj, wireObj.ref);
  }

  void _api_fill_to_wire_box_autoadd_customized(Customized apiObj, ffi.Pointer<wire_Customized> wireObj) {
    _api_fill_to_wire_customized(apiObj, wireObj.ref);
  }

  void _api_fill_to_wire_box_autoadd_exotic_optionals(
      ExoticOptionals apiObj, ffi.Pointer<wire_ExoticOptionals> wireObj) {
    _api_fill_to_wire_exotic_optionals(apiObj, wireObj.ref);
  }

  void _api_fill_to_wire_box_autoadd_kitchen_sink(KitchenSink apiObj, ffi.Pointer<wire_KitchenSink> wireObj) {
    _api_fill_to_wire_kitchen_sink(apiObj, wireObj.ref);
  }

  void _api_fill_to_wire_box_autoadd_my_size(MySize apiObj, ffi.Pointer<wire_MySize> wireObj) {
    _api_fill_to_wire_my_size(apiObj, wireObj.ref);
  }

  void _api_fill_to_wire_box_autoadd_my_struct(MyStruct apiObj, ffi.Pointer<wire_MyStruct> wireObj) {
    _api_fill_to_wire_my_struct(apiObj, wireObj.ref);
  }

  void _api_fill_to_wire_box_autoadd_my_tree_node(MyTreeNode apiObj, ffi.Pointer<wire_MyTreeNode> wireObj) {
    _api_fill_to_wire_my_tree_node(apiObj, wireObj.ref);
  }

  void _api_fill_to_wire_box_autoadd_new_type_int(NewTypeInt apiObj, ffi.Pointer<wire_NewTypeInt> wireObj) {
    _api_fill_to_wire_new_type_int(apiObj, wireObj.ref);
  }

  void _api_fill_to_wire_box_exotic_optionals(ExoticOptionals apiObj, ffi.Pointer<wire_ExoticOptionals> wireObj) {
    _api_fill_to_wire_exotic_optionals(apiObj, wireObj.ref);
  }

  void _api_fill_to_wire_box_kitchen_sink(KitchenSink apiObj, ffi.Pointer<wire_KitchenSink> wireObj) {
    _api_fill_to_wire_kitchen_sink(apiObj, wireObj.ref);
  }

  void _api_fill_to_wire_box_my_size(MySize apiObj, ffi.Pointer<wire_MySize> wireObj) {
    _api_fill_to_wire_my_size(apiObj, wireObj.ref);
  }

  void _api_fill_to_wire_customized(Customized apiObj, wire_Customized wireObj) {
    wireObj.final_field = _api2wire_String(apiObj.finalField);
    wireObj.non_final_field = _api2wire_opt_String(apiObj.nonFinalField);
  }

  void _api_fill_to_wire_exotic_optionals(ExoticOptionals apiObj, wire_ExoticOptionals wireObj) {
    wireObj.int32 = _api2wire_opt_box_autoadd_i32(apiObj.int32);
    wireObj.int64 = _api2wire_opt_box_autoadd_i64(apiObj.int64);
    wireObj.float64 = _api2wire_opt_box_autoadd_f64(apiObj.float64);
    wireObj.boolean = _api2wire_opt_box_autoadd_bool(apiObj.boolean);
    wireObj.zerocopy = _api2wire_opt_ZeroCopyBuffer_Uint8List(apiObj.zerocopy);
    wireObj.int8list = _api2wire_opt_int_8_list(apiObj.int8List);
    wireObj.uint8list = _api2wire_opt_uint_8_list(apiObj.uint8List);
    wireObj.int32list = _api2wire_opt_int_32_list(apiObj.int32List);
    wireObj.int64list = _api2wire_opt_int_64_list(apiObj.int64List);
    wireObj.float32list = _api2wire_opt_float_32_list(apiObj.float32List);
    wireObj.float64list = _api2wire_opt_float_64_list(apiObj.float64List);
    wireObj.attributes = _api2wire_opt_list_attribute(apiObj.attributes);
    wireObj.attributes_nullable = _api2wire_list_opt_box_autoadd_attribute(apiObj.attributesNullable);
    wireObj.nullable_attributes = _api2wire_opt_list_opt_box_autoadd_attribute(apiObj.nullableAttributes);
    wireObj.newtypeint = _api2wire_opt_box_autoadd_new_type_int(apiObj.newtypeint);
    wireObj.string_list = _api2wire_opt_StringList(apiObj.stringList);
  }

  void _api_fill_to_wire_kitchen_sink(KitchenSink apiObj, wire_KitchenSink wireObj) {
    if (apiObj is Empty) {
      wireObj.tag = 0;
      return;
    }
    if (apiObj is Primitives) {
      wireObj.tag = 1;
      wireObj.kind = inner.inflate_KitchenSink_Primitives();
      wireObj.kind.ref.Primitives.ref.int32 = _api2wire_i32(apiObj.int32);
      wireObj.kind.ref.Primitives.ref.float64 = _api2wire_f64(apiObj.float64);
      wireObj.kind.ref.Primitives.ref.boolean = _api2wire_bool(apiObj.boolean);
    }
    if (apiObj is Nested) {
      wireObj.tag = 2;
      wireObj.kind = inner.inflate_KitchenSink_Nested();
      wireObj.kind.ref.Nested.ref.field0 = _api2wire_box_kitchen_sink(apiObj.field0);
    }
    if (apiObj is Optional) {
      wireObj.tag = 3;
      wireObj.kind = inner.inflate_KitchenSink_Optional();
      wireObj.kind.ref.Optional.ref.field0 = _api2wire_opt_box_autoadd_i32(apiObj.field0);
      wireObj.kind.ref.Optional.ref.field1 = _api2wire_opt_box_autoadd_i32(apiObj.field1);
    }
    if (apiObj is Buffer) {
      wireObj.tag = 4;
      wireObj.kind = inner.inflate_KitchenSink_Buffer();
      wireObj.kind.ref.Buffer.ref.field0 = _api2wire_ZeroCopyBuffer_Uint8List(apiObj.field0);
    }
    if (apiObj is Enums) {
      wireObj.tag = 5;
      wireObj.kind = inner.inflate_KitchenSink_Enums();
      wireObj.kind.ref.Enums.ref.field0 = _api2wire_weekdays(apiObj.field0);
    }
  }

  void _api_fill_to_wire_my_size(MySize apiObj, wire_MySize wireObj) {
    wireObj.width = _api2wire_i32(apiObj.width);
    wireObj.height = _api2wire_i32(apiObj.height);
  }

  void _api_fill_to_wire_my_struct(MyStruct apiObj, wire_MyStruct wireObj) {
    wireObj.content = _api2wire_bool(apiObj.content);
  }

  void _api_fill_to_wire_my_tree_node(MyTreeNode apiObj, wire_MyTreeNode wireObj) {
    wireObj.value_i32 = _api2wire_i32(apiObj.valueI32);
    wireObj.value_vec_u8 = _api2wire_uint_8_list(apiObj.valueVecU8);
    wireObj.value_boolean = _api2wire_bool(apiObj.valueBoolean);
    wireObj.children = _api2wire_list_my_tree_node(apiObj.children);
  }

  void _api_fill_to_wire_new_type_int(NewTypeInt apiObj, wire_NewTypeInt wireObj) {
    wireObj.field0 = _api2wire_i64(apiObj.field0);
  }

  void _api_fill_to_wire_opt_box_autoadd_attribute(Attribute? apiObj, ffi.Pointer<wire_Attribute> wireObj) {
    if (apiObj != null) _api_fill_to_wire_box_autoadd_attribute(apiObj, wireObj);
  }

  void _api_fill_to_wire_opt_box_autoadd_exotic_optionals(
      ExoticOptionals? apiObj, ffi.Pointer<wire_ExoticOptionals> wireObj) {
    if (apiObj != null) _api_fill_to_wire_box_autoadd_exotic_optionals(apiObj, wireObj);
  }

  void _api_fill_to_wire_opt_box_autoadd_new_type_int(NewTypeInt? apiObj, ffi.Pointer<wire_NewTypeInt> wireObj) {
    if (apiObj != null) _api_fill_to_wire_box_autoadd_new_type_int(apiObj, wireObj);
  }

  void _api_fill_to_wire_opt_box_exotic_optionals(ExoticOptionals? apiObj, ffi.Pointer<wire_ExoticOptionals> wireObj) {
    if (apiObj != null) _api_fill_to_wire_box_exotic_optionals(apiObj, wireObj);
  }
}

// Section: wire2api
String _wire2api_String(dynamic raw) {
  return raw as String;
}

List<String> _wire2api_StringList(dynamic raw) {
  return (raw as List<dynamic>).cast<String>();
}

Uint8List _wire2api_SyncReturnVecU8(dynamic raw) {
  return raw as Uint8List;
}

Float32List _wire2api_ZeroCopyBuffer_Float32List(dynamic raw) {
  return raw as Float32List;
}

Float64List _wire2api_ZeroCopyBuffer_Float64List(dynamic raw) {
  return raw as Float64List;
}

Int16List _wire2api_ZeroCopyBuffer_Int16List(dynamic raw) {
  return raw as Int16List;
}

Int32List _wire2api_ZeroCopyBuffer_Int32List(dynamic raw) {
  return raw as Int32List;
}

Int64List _wire2api_ZeroCopyBuffer_Int64List(dynamic raw) {
  return raw as Int64List;
}

Int8List _wire2api_ZeroCopyBuffer_Int8List(dynamic raw) {
  return raw as Int8List;
}

Uint16List _wire2api_ZeroCopyBuffer_Uint16List(dynamic raw) {
  return raw as Uint16List;
}

Uint32List _wire2api_ZeroCopyBuffer_Uint32List(dynamic raw) {
  return raw as Uint32List;
}

Uint64List _wire2api_ZeroCopyBuffer_Uint64List(dynamic raw) {
  return raw as Uint64List;
}

Uint8List _wire2api_ZeroCopyBuffer_Uint8List(dynamic raw) {
  return raw as Uint8List;
}

ApplicationEnv _wire2api_application_env(dynamic raw) {
  final arr = raw as List<dynamic>;
  if (arr.length != 1) throw Exception('unexpected arr length: expect 1 but see ${arr.length}');
  return ApplicationEnv(
    vars: _wire2api_StringList(arr[0]),
  );
}

ApplicationMode _wire2api_application_mode(dynamic raw) {
  return ApplicationMode.values[raw];
}

ApplicationSettings _wire2api_application_settings(dynamic raw) {
  final arr = raw as List<dynamic>;
  if (arr.length != 4) throw Exception('unexpected arr length: expect 4 but see ${arr.length}');
  return ApplicationSettings(
    name: _wire2api_String(arr[0]),
    version: _wire2api_String(arr[1]),
    mode: _wire2api_application_mode(arr[2]),
    env: _wire2api_box_application_env(arr[3]),
  );
}

Attribute _wire2api_attribute(dynamic raw) {
  final arr = raw as List<dynamic>;
  if (arr.length != 2) throw Exception('unexpected arr length: expect 2 but see ${arr.length}');
  return Attribute(
    key: _wire2api_String(arr[0]),
    value: _wire2api_String(arr[1]),
  );
}

bool _wire2api_bool(dynamic raw) {
  return raw as bool;
}

ApplicationEnv _wire2api_box_application_env(dynamic raw) {
  return _wire2api_application_env(raw);
}

Attribute _wire2api_box_autoadd_attribute(dynamic raw) {
  return _wire2api_attribute(raw);
}

bool _wire2api_box_autoadd_bool(dynamic raw) {
  return raw as bool;
}

Element _wire2api_box_autoadd_element(dynamic raw) {
  return _wire2api_element(raw);
}

ExoticOptionals _wire2api_box_autoadd_exotic_optionals(dynamic raw) {
  return _wire2api_exotic_optionals(raw);
}

double _wire2api_box_autoadd_f64(dynamic raw) {
  return raw as double;
}

int _wire2api_box_autoadd_i32(dynamic raw) {
  return raw as int;
}

int _wire2api_box_autoadd_i64(dynamic raw) {
  return raw as int;
}

NewTypeInt _wire2api_box_autoadd_new_type_int(dynamic raw) {
  return _wire2api_new_type_int(raw);
}

KitchenSink _wire2api_box_kitchen_sink(dynamic raw) {
  return raw as KitchenSink;
}

Element _wire2api_element(dynamic raw) {
  final arr = raw as List<dynamic>;
  if (arr.length != 4) throw Exception('unexpected arr length: expect 4 but see ${arr.length}');
  return Element(
    tag: _wire2api_opt_String(arr[0]),
    text: _wire2api_opt_String(arr[1]),
    attributes: _wire2api_opt_list_attribute(arr[2]),
    children: _wire2api_opt_list_element(arr[3]),
  );
}

ExoticOptionals _wire2api_exotic_optionals(dynamic raw) {
  final arr = raw as List<dynamic>;
  if (arr.length != 16) throw Exception('unexpected arr length: expect 16 but see ${arr.length}');
  return ExoticOptionals(
    int32: _wire2api_opt_box_autoadd_i32(arr[0]),
    int64: _wire2api_opt_box_autoadd_i64(arr[1]),
    float64: _wire2api_opt_box_autoadd_f64(arr[2]),
    boolean: _wire2api_opt_box_autoadd_bool(arr[3]),
    zerocopy: _wire2api_opt_ZeroCopyBuffer_Uint8List(arr[4]),
    int8List: _wire2api_opt_int_8_list(arr[5]),
    uint8List: _wire2api_opt_uint_8_list(arr[6]),
    int32List: _wire2api_opt_int_32_list(arr[7]),
    int64List: _wire2api_opt_int_64_list(arr[8]),
    float32List: _wire2api_opt_float_32_list(arr[9]),
    float64List: _wire2api_opt_float_64_list(arr[10]),
    attributes: _wire2api_opt_list_attribute(arr[11]),
    attributesNullable: _wire2api_list_opt_box_autoadd_attribute(arr[12]),
    nullableAttributes: _wire2api_opt_list_opt_box_autoadd_attribute(arr[13]),
    newtypeint: _wire2api_opt_box_autoadd_new_type_int(arr[14]),
    stringList: _wire2api_opt_StringList(arr[15]),
  );
}

double _wire2api_f32(dynamic raw) {
  return raw as double;
}

double _wire2api_f64(dynamic raw) {
  return raw as double;
}

Float32List _wire2api_float_32_list(dynamic raw) {
  return raw as Float32List;
}

Float64List _wire2api_float_64_list(dynamic raw) {
  return raw as Float64List;
}

int _wire2api_i16(dynamic raw) {
  return raw as int;
}

int _wire2api_i32(dynamic raw) {
  return raw as int;
}

int _wire2api_i64(dynamic raw) {
  return raw as int;
}

int _wire2api_i8(dynamic raw) {
  return raw as int;
}

Int16List _wire2api_int_16_list(dynamic raw) {
  return raw as Int16List;
}

Int32List _wire2api_int_32_list(dynamic raw) {
  return raw as Int32List;
}

Int64List _wire2api_int_64_list(dynamic raw) {
  return raw as Int64List;
}

Int8List _wire2api_int_8_list(dynamic raw) {
  return raw as Int8List;
}

KitchenSink _wire2api_kitchen_sink(dynamic raw) {
  switch (raw[0]) {
    case 0:
      return Empty();
    case 1:
      return Primitives(
        int32: _wire2api_i32(raw[1]),
        float64: _wire2api_f64(raw[2]),
        boolean: _wire2api_bool(raw[3]),
      );
    case 2:
      return Nested(
        _wire2api_box_kitchen_sink(raw[1]),
      );
    case 3:
      return Optional(
        _wire2api_opt_box_autoadd_i32(raw[1]),
        _wire2api_opt_box_autoadd_i32(raw[2]),
      );
    case 4:
      return Buffer(
        _wire2api_ZeroCopyBuffer_Uint8List(raw[1]),
      );
    case 5:
      return Enums(
        _wire2api_weekdays(raw[1]),
      );
    default:
      throw Exception("unreachable");
  }
}

List<Attribute> _wire2api_list_attribute(dynamic raw) {
  return (raw as List<dynamic>).map(_wire2api_attribute).toList();
}

List<Element> _wire2api_list_element(dynamic raw) {
  return (raw as List<dynamic>).map(_wire2api_element).toList();
}

List<MySize> _wire2api_list_my_size(dynamic raw) {
  return (raw as List<dynamic>).map(_wire2api_my_size).toList();
}

List<MyTreeNode> _wire2api_list_my_tree_node(dynamic raw) {
  return (raw as List<dynamic>).map(_wire2api_my_tree_node).toList();
}

List<Attribute?> _wire2api_list_opt_box_autoadd_attribute(dynamic raw) {
  return (raw as List<dynamic>).map(_wire2api_opt_box_autoadd_attribute).toList();
}

MySize _wire2api_my_size(dynamic raw) {
  final arr = raw as List<dynamic>;
  if (arr.length != 2) throw Exception('unexpected arr length: expect 2 but see ${arr.length}');
  return MySize(
    width: _wire2api_i32(arr[0]),
    height: _wire2api_i32(arr[1]),
  );
}

MyTreeNode _wire2api_my_tree_node(dynamic raw) {
  final arr = raw as List<dynamic>;
  if (arr.length != 4) throw Exception('unexpected arr length: expect 4 but see ${arr.length}');
  return MyTreeNode(
    valueI32: _wire2api_i32(arr[0]),
    valueVecU8: _wire2api_uint_8_list(arr[1]),
    valueBoolean: _wire2api_bool(arr[2]),
    children: _wire2api_list_my_tree_node(arr[3]),
  );
}

NewTypeInt _wire2api_new_type_int(dynamic raw) {
  final arr = raw as List<dynamic>;
  if (arr.length != 1) throw Exception('unexpected arr length: expect 1 but see ${arr.length}');
  return NewTypeInt(
    field0: _wire2api_i64(arr[0]),
  );
}

String? _wire2api_opt_String(dynamic raw) {
  return raw == null ? null : _wire2api_String(raw);
}

List<String>? _wire2api_opt_StringList(dynamic raw) {
  return raw == null ? null : _wire2api_StringList(raw);
}

Uint8List? _wire2api_opt_ZeroCopyBuffer_Uint8List(dynamic raw) {
  return raw == null ? null : _wire2api_ZeroCopyBuffer_Uint8List(raw);
}

Attribute? _wire2api_opt_box_autoadd_attribute(dynamic raw) {
  return raw == null ? null : _wire2api_box_autoadd_attribute(raw);
}

bool? _wire2api_opt_box_autoadd_bool(dynamic raw) {
  return raw == null ? null : _wire2api_box_autoadd_bool(raw);
}

Element? _wire2api_opt_box_autoadd_element(dynamic raw) {
  return raw == null ? null : _wire2api_box_autoadd_element(raw);
}

ExoticOptionals? _wire2api_opt_box_autoadd_exotic_optionals(dynamic raw) {
  return raw == null ? null : _wire2api_box_autoadd_exotic_optionals(raw);
}

double? _wire2api_opt_box_autoadd_f64(dynamic raw) {
  return raw == null ? null : _wire2api_box_autoadd_f64(raw);
}

int? _wire2api_opt_box_autoadd_i32(dynamic raw) {
  return raw == null ? null : _wire2api_box_autoadd_i32(raw);
}

int? _wire2api_opt_box_autoadd_i64(dynamic raw) {
  return raw == null ? null : _wire2api_box_autoadd_i64(raw);
}

NewTypeInt? _wire2api_opt_box_autoadd_new_type_int(dynamic raw) {
  return raw == null ? null : _wire2api_box_autoadd_new_type_int(raw);
}

Float32List? _wire2api_opt_float_32_list(dynamic raw) {
  return raw == null ? null : _wire2api_float_32_list(raw);
}

Float64List? _wire2api_opt_float_64_list(dynamic raw) {
  return raw == null ? null : _wire2api_float_64_list(raw);
}

Int32List? _wire2api_opt_int_32_list(dynamic raw) {
  return raw == null ? null : _wire2api_int_32_list(raw);
}

Int64List? _wire2api_opt_int_64_list(dynamic raw) {
  return raw == null ? null : _wire2api_int_64_list(raw);
}

Int8List? _wire2api_opt_int_8_list(dynamic raw) {
  return raw == null ? null : _wire2api_int_8_list(raw);
}

List<Attribute>? _wire2api_opt_list_attribute(dynamic raw) {
  return raw == null ? null : _wire2api_list_attribute(raw);
}

List<Element>? _wire2api_opt_list_element(dynamic raw) {
  return raw == null ? null : _wire2api_list_element(raw);
}

List<Attribute?>? _wire2api_opt_list_opt_box_autoadd_attribute(dynamic raw) {
  return raw == null ? null : _wire2api_list_opt_box_autoadd_attribute(raw);
}

Uint8List? _wire2api_opt_uint_8_list(dynamic raw) {
  return raw == null ? null : _wire2api_uint_8_list(raw);
}

Weekdays? _wire2api_opt_weekdays(dynamic raw) {
  return raw == null ? null : _wire2api_weekdays(raw);
}

int _wire2api_u16(dynamic raw) {
  return raw as int;
}

int _wire2api_u32(dynamic raw) {
  return raw as int;
}

int _wire2api_u64(dynamic raw) {
  return raw as int;
}

int _wire2api_u8(dynamic raw) {
  return raw as int;
}

Uint16List _wire2api_uint_16_list(dynamic raw) {
  return raw as Uint16List;
}

Uint32List _wire2api_uint_32_list(dynamic raw) {
  return raw as Uint32List;
}

Uint64List _wire2api_uint_64_list(dynamic raw) {
  return raw as Uint64List;
}

Uint8List _wire2api_uint_8_list(dynamic raw) {
  return raw as Uint8List;
}

void _wire2api_unit(dynamic raw) {
  return;
}

VecOfPrimitivePack _wire2api_vec_of_primitive_pack(dynamic raw) {
  final arr = raw as List<dynamic>;
  if (arr.length != 10) throw Exception('unexpected arr length: expect 10 but see ${arr.length}');
  return VecOfPrimitivePack(
    int8List: _wire2api_int_8_list(arr[0]),
    uint8List: _wire2api_uint_8_list(arr[1]),
    int16List: _wire2api_int_16_list(arr[2]),
    uint16List: _wire2api_uint_16_list(arr[3]),
    uint32List: _wire2api_uint_32_list(arr[4]),
    int32List: _wire2api_int_32_list(arr[5]),
    uint64List: _wire2api_uint_64_list(arr[6]),
    int64List: _wire2api_int_64_list(arr[7]),
    float32List: _wire2api_float_32_list(arr[8]),
    float64List: _wire2api_float_64_list(arr[9]),
  );
}

Weekdays _wire2api_weekdays(dynamic raw) {
  return Weekdays.values[raw];
}

ZeroCopyVecOfPrimitivePack _wire2api_zero_copy_vec_of_primitive_pack(dynamic raw) {
  final arr = raw as List<dynamic>;
  if (arr.length != 10) throw Exception('unexpected arr length: expect 10 but see ${arr.length}');
  return ZeroCopyVecOfPrimitivePack(
    int8List: _wire2api_ZeroCopyBuffer_Int8List(arr[0]),
    uint8List: _wire2api_ZeroCopyBuffer_Uint8List(arr[1]),
    int16List: _wire2api_ZeroCopyBuffer_Int16List(arr[2]),
    uint16List: _wire2api_ZeroCopyBuffer_Uint16List(arr[3]),
    uint32List: _wire2api_ZeroCopyBuffer_Uint32List(arr[4]),
    int32List: _wire2api_ZeroCopyBuffer_Int32List(arr[5]),
    uint64List: _wire2api_ZeroCopyBuffer_Uint64List(arr[6]),
    int64List: _wire2api_ZeroCopyBuffer_Int64List(arr[7]),
    float32List: _wire2api_ZeroCopyBuffer_Float32List(arr[8]),
    float64List: _wire2api_ZeroCopyBuffer_Float64List(arr[9]),
  );
}

// ignore_for_file: camel_case_types, non_constant_identifier_names, avoid_positional_boolean_parameters, annotate_overrides, constant_identifier_names

// AUTO GENERATED FILE, DO NOT EDIT.
//
// Generated by `package:ffigen`.

/// generated by flutter_rust_bridge
class FlutterRustBridgeExampleWire implements FlutterRustBridgeWireBase {
  /// Holds the symbol lookup function.
  final ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName) _lookup;

  /// The symbols are looked up in [dynamicLibrary].
  FlutterRustBridgeExampleWire(ffi.DynamicLibrary dynamicLibrary) : _lookup = dynamicLibrary.lookup;

  /// The symbols are looked up with [lookup].
  FlutterRustBridgeExampleWire.fromLookup(ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName) lookup)
      : _lookup = lookup;

  void store_dart_post_cobject(
    DartPostCObjectFnType ptr,
  ) {
    return _store_dart_post_cobject(
      ptr,
    );
  }

  late final _store_dart_post_cobjectPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(DartPostCObjectFnType)>>('store_dart_post_cobject');
  late final _store_dart_post_cobject = _store_dart_post_cobjectPtr.asFunction<void Function(DartPostCObjectFnType)>();
}

typedef DartPostCObjectFnType = ffi.Pointer<ffi.NativeFunction<ffi.Uint8 Function(DartPort, ffi.Pointer<ffi.Void>)>>;
typedef DartPort = ffi.Int64;
